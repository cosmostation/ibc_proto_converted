// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: atomone/feemarket/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the feemarket module's genesis state.
struct Atomone_Feemarket_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Params are the parameters for the feemarket module. These parameters
  /// can be utilized to implement both the base EIP-1559 fee market and
  /// and the AIMD EIP-1559 fee market.
  var params: Atomone_Feemarket_V1_Params {
    get {return _params ?? Atomone_Feemarket_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// State contains the current state of the AIMD fee market.
  var state: Atomone_Feemarket_V1_State {
    get {return _state ?? Atomone_Feemarket_V1_State()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Atomone_Feemarket_V1_Params? = nil
  fileprivate var _state: Atomone_Feemarket_V1_State? = nil
}

/// State is utilized to track the current state of the fee market. This includes
/// the current base fee, learning rate, and block gas within the
/// specified AIMD window.
struct Atomone_Feemarket_V1_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// BaseGasPrice is the current base fee. This is denominated in the fee per
  /// gas unit.
  var baseGasPrice: String = String()

  /// LearningRate is the current learning rate.
  var learningRate: String = String()

  /// Window contains a list of the last blocks' gas values. This is used
  /// to calculate the next base fee. This stores the number of units of gas
  /// consumed per block.
  var window: [UInt64] = []

  /// Index is the index of the current block in the block gas window.
  var index: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Atomone_Feemarket_V1_GenesisState: @unchecked Sendable {}
extension Atomone_Feemarket_V1_State: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "atomone.feemarket.v1"

extension Atomone_Feemarket_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Feemarket_V1_GenesisState, rhs: Atomone_Feemarket_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Feemarket_V1_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_gas_price"),
    2: .standard(proto: "learning_rate"),
    3: .same(proto: "window"),
    4: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.baseGasPrice) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.learningRate) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.window) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.baseGasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.baseGasPrice, fieldNumber: 1)
    }
    if !self.learningRate.isEmpty {
      try visitor.visitSingularStringField(value: self.learningRate, fieldNumber: 2)
    }
    if !self.window.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.window, fieldNumber: 3)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Feemarket_V1_State, rhs: Atomone_Feemarket_V1_State) -> Bool {
    if lhs.baseGasPrice != rhs.baseGasPrice {return false}
    if lhs.learningRate != rhs.learningRate {return false}
    if lhs.window != rhs.window {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
