// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stratos/pot/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgVolumeReport encapsulates an VolumeReport transaction as an SDK message.
struct Stratos_Pot_V1_MsgVolumeReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var walletVolumes: [Stratos_Pot_V1_SingleWalletVolume] = []

  var reporter: String = String()

  var epoch: String = String()

  var reportReference: String = String()

  var reporterOwner: String = String()

  var blsSignature: Stratos_Pot_V1_BLSSignatureInfo {
    get {return _blsSignature ?? Stratos_Pot_V1_BLSSignatureInfo()}
    set {_blsSignature = newValue}
  }
  /// Returns true if `blsSignature` has been explicitly set.
  var hasBlsSignature: Bool {return self._blsSignature != nil}
  /// Clears the value of `blsSignature`. Subsequent reads from it will return its default value.
  mutating func clearBlsSignature() {self._blsSignature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _blsSignature: Stratos_Pot_V1_BLSSignatureInfo? = nil
}

/// MsgVolumeReportResponse defines the MsgVolumeReport response type
struct Stratos_Pot_V1_MsgVolumeReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdraw encapsulates an withdraw transaction as an SDK message.
struct Stratos_Pot_V1_MsgWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var walletAddress: String = String()

  var targetAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdrawResponse defines the Msg/MsgWithdraw response type.
struct Stratos_Pot_V1_MsgWithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgFoundationDeposit - encapsulates an FoundationDeposit transaction as an SDK message
struct Stratos_Pot_V1_MsgFoundationDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgFoundationDepositResponse defines the MsgFoundationDeposit response type
struct Stratos_Pot_V1_MsgFoundationDepositResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemoveMetaNode - encapsulates an MsgRemoveMetaNode transaction as an SDK message
struct Stratos_Pot_V1_MsgSlashingResourceNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reporters: [String] = []

  var reporterOwner: [String] = []

  var networkAddress: String = String()

  var walletAddress: String = String()

  var slashing: String = String()

  var suspend: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSlashingResourceNodeResponse defines the Msg/MsgSlashingResourceNode response type.
struct Stratos_Pot_V1_MsgSlashingResourceNodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_BLSSignatureInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pubKeys: [Data] = []

  var signature: Data = Data()

  var txData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateParams defines a Msg for updating the x/pot module parameters.
struct Stratos_Pot_V1_MsgUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// params defines the x/pot parameters to update.
  /// NOTE: All parameters must be supplied.
  var params: Stratos_Pot_V1_Params {
    get {return _params ?? Stratos_Pot_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stratos_Pot_V1_Params? = nil
}

/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
struct Stratos_Pot_V1_MsgUpdateParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stratos_Pot_V1_MsgVolumeReport: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgVolumeReportResponse: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgWithdraw: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgWithdrawResponse: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgFoundationDeposit: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgFoundationDepositResponse: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgSlashingResourceNode: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgSlashingResourceNodeResponse: @unchecked Sendable {}
extension Stratos_Pot_V1_BLSSignatureInfo: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgUpdateParams: @unchecked Sendable {}
extension Stratos_Pot_V1_MsgUpdateParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stratos.pot.v1"

extension Stratos_Pot_V1_MsgVolumeReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVolumeReport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wallet_volumes"),
    2: .same(proto: "reporter"),
    3: .same(proto: "epoch"),
    4: .standard(proto: "report_reference"),
    5: .standard(proto: "reporter_owner"),
    6: .standard(proto: "BLS_signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.walletVolumes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reporter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.epoch) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.reportReference) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.reporterOwner) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._blsSignature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.walletVolumes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.walletVolumes, fieldNumber: 1)
    }
    if !self.reporter.isEmpty {
      try visitor.visitSingularStringField(value: self.reporter, fieldNumber: 2)
    }
    if !self.epoch.isEmpty {
      try visitor.visitSingularStringField(value: self.epoch, fieldNumber: 3)
    }
    if !self.reportReference.isEmpty {
      try visitor.visitSingularStringField(value: self.reportReference, fieldNumber: 4)
    }
    if !self.reporterOwner.isEmpty {
      try visitor.visitSingularStringField(value: self.reporterOwner, fieldNumber: 5)
    }
    try { if let v = self._blsSignature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgVolumeReport, rhs: Stratos_Pot_V1_MsgVolumeReport) -> Bool {
    if lhs.walletVolumes != rhs.walletVolumes {return false}
    if lhs.reporter != rhs.reporter {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.reportReference != rhs.reportReference {return false}
    if lhs.reporterOwner != rhs.reporterOwner {return false}
    if lhs._blsSignature != rhs._blsSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgVolumeReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVolumeReportResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgVolumeReportResponse, rhs: Stratos_Pot_V1_MsgVolumeReportResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "wallet_address"),
    3: .standard(proto: "target_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.walletAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.targetAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 1)
    }
    if !self.walletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.walletAddress, fieldNumber: 2)
    }
    if !self.targetAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.targetAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgWithdraw, rhs: Stratos_Pot_V1_MsgWithdraw) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.walletAddress != rhs.walletAddress {return false}
    if lhs.targetAddress != rhs.targetAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgWithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgWithdrawResponse, rhs: Stratos_Pot_V1_MsgWithdrawResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgFoundationDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFoundationDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgFoundationDeposit, rhs: Stratos_Pot_V1_MsgFoundationDeposit) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgFoundationDepositResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFoundationDepositResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgFoundationDepositResponse, rhs: Stratos_Pot_V1_MsgFoundationDepositResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgSlashingResourceNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSlashingResourceNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reporters"),
    2: .standard(proto: "reporter_owner"),
    3: .standard(proto: "network_address"),
    4: .standard(proto: "wallet_address"),
    5: .same(proto: "slashing"),
    6: .same(proto: "suspend"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.reporters) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.reporterOwner) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.walletAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.slashing) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.suspend) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reporters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.reporters, fieldNumber: 1)
    }
    if !self.reporterOwner.isEmpty {
      try visitor.visitRepeatedStringField(value: self.reporterOwner, fieldNumber: 2)
    }
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 3)
    }
    if !self.walletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.walletAddress, fieldNumber: 4)
    }
    if !self.slashing.isEmpty {
      try visitor.visitSingularStringField(value: self.slashing, fieldNumber: 5)
    }
    if self.suspend != false {
      try visitor.visitSingularBoolField(value: self.suspend, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgSlashingResourceNode, rhs: Stratos_Pot_V1_MsgSlashingResourceNode) -> Bool {
    if lhs.reporters != rhs.reporters {return false}
    if lhs.reporterOwner != rhs.reporterOwner {return false}
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs.walletAddress != rhs.walletAddress {return false}
    if lhs.slashing != rhs.slashing {return false}
    if lhs.suspend != rhs.suspend {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgSlashingResourceNodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSlashingResourceNodeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgSlashingResourceNodeResponse, rhs: Stratos_Pot_V1_MsgSlashingResourceNodeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_BLSSignatureInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BLSSignatureInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_keys"),
    2: .same(proto: "signature"),
    3: .same(proto: "txData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.pubKeys) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.txData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKeys.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.pubKeys, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.txData.isEmpty {
      try visitor.visitSingularBytesField(value: self.txData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_BLSSignatureInfo, rhs: Stratos_Pot_V1_BLSSignatureInfo) -> Bool {
    if lhs.pubKeys != rhs.pubKeys {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.txData != rhs.txData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgUpdateParams, rhs: Stratos_Pot_V1_MsgUpdateParams) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MsgUpdateParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParamsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MsgUpdateParamsResponse, rhs: Stratos_Pot_V1_MsgUpdateParamsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
