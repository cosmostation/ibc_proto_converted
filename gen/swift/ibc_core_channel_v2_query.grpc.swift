//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/channel/v2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Ibc_Core_Channel_V2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Core_Channel_V2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? { get }

  func nextSequenceSend(
    _ request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>

  func packetCommitment(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>

  func packetCommitments(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>

  func packetAcknowledgement(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>

  func packetAcknowledgements(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>

  func packetReceipt(
    _ request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse>

  func unreceivedPackets(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>

  func unreceivedAcks(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>
}

extension Ibc_Core_Channel_V2_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.core.channel.v2.Query"
  }

  /// NextSequenceSend returns the next send sequence for a given channel.
  ///
  /// - Parameters:
  ///   - request: Request to send to NextSequenceSend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nextSequenceSend(
    _ request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.nextSequenceSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextSequenceSendInterceptors() ?? []
    )
  }

  /// PacketCommitment queries a stored packet commitment hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to PacketCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func packetCommitment(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentInterceptors() ?? []
    )
  }

  /// PacketCommitments queries a stored packet commitment hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to PacketCommitments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func packetCommitments(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentsInterceptors() ?? []
    )
  }

  /// PacketAcknowledgement queries a stored acknowledgement commitment hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to PacketAcknowledgement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func packetAcknowledgement(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementInterceptors() ?? []
    )
  }

  /// PacketAcknowledgements returns all packet acknowledgements associated with a channel.
  ///
  /// - Parameters:
  ///   - request: Request to send to PacketAcknowledgements.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func packetAcknowledgements(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementsInterceptors() ?? []
    )
  }

  /// PacketReceipt queries a stored packet receipt.
  ///
  /// - Parameters:
  ///   - request: Request to send to PacketReceipt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func packetReceipt(
    _ request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketReceiptInterceptors() ?? []
    )
  }

  /// UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnreceivedPackets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unreceivedPackets(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedPacketsInterceptors() ?? []
    )
  }

  /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnreceivedAcks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unreceivedAcks(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedAcks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedAcksInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ibc_Core_Channel_V2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ibc_Core_Channel_V2_QueryNIOClient")
internal final class Ibc_Core_Channel_V2_QueryClient: Ibc_Core_Channel_V2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.channel.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ibc_Core_Channel_V2_QueryNIOClient: Ibc_Core_Channel_V2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.channel.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Channel_V2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? { get }

  func makeNextSequenceSendCall(
    _ request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>

  func makePacketCommitmentCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>

  func makePacketCommitmentsCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>

  func makePacketAcknowledgementCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>

  func makePacketAcknowledgementsCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>

  func makePacketReceiptCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse>

  func makeUnreceivedPacketsCall(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>

  func makeUnreceivedAcksCall(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Channel_V2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeNextSequenceSendCall(
    _ request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.nextSequenceSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextSequenceSendInterceptors() ?? []
    )
  }

  internal func makePacketCommitmentCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentInterceptors() ?? []
    )
  }

  internal func makePacketCommitmentsCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentsInterceptors() ?? []
    )
  }

  internal func makePacketAcknowledgementCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementInterceptors() ?? []
    )
  }

  internal func makePacketAcknowledgementsCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementsInterceptors() ?? []
    )
  }

  internal func makePacketReceiptCall(
    _ request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketReceiptInterceptors() ?? []
    )
  }

  internal func makeUnreceivedPacketsCall(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedPacketsInterceptors() ?? []
    )
  }

  internal func makeUnreceivedAcksCall(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedAcks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedAcksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V2_QueryAsyncClientProtocol {
  internal func nextSequenceSend(
    _ request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryNextSequenceSendResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.nextSequenceSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextSequenceSendInterceptors() ?? []
    )
  }

  internal func packetCommitment(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketCommitmentResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentInterceptors() ?? []
    )
  }

  internal func packetCommitments(
    _ request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketCommitmentsInterceptors() ?? []
    )
  }

  internal func packetAcknowledgement(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementInterceptors() ?? []
    )
  }

  internal func packetAcknowledgements(
    _ request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketAcknowledgementsInterceptors() ?? []
    )
  }

  internal func packetReceipt(
    _ request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketReceiptResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePacketReceiptInterceptors() ?? []
    )
  }

  internal func unreceivedPackets(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedPacketsInterceptors() ?? []
    )
  }

  internal func unreceivedAcks(
    _ request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedAcks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnreceivedAcksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ibc_Core_Channel_V2_QueryAsyncClient: Ibc_Core_Channel_V2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ibc_Core_Channel_V2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'nextSequenceSend'.
  func makeNextSequenceSendInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>]

  /// - Returns: Interceptors to use when invoking 'packetCommitment'.
  func makePacketCommitmentInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>]

  /// - Returns: Interceptors to use when invoking 'packetCommitments'.
  func makePacketCommitmentsInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>]

  /// - Returns: Interceptors to use when invoking 'packetAcknowledgement'.
  func makePacketAcknowledgementInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>]

  /// - Returns: Interceptors to use when invoking 'packetAcknowledgements'.
  func makePacketAcknowledgementsInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>]

  /// - Returns: Interceptors to use when invoking 'packetReceipt'.
  func makePacketReceiptInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse>]

  /// - Returns: Interceptors to use when invoking 'unreceivedPackets'.
  func makeUnreceivedPacketsInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>]

  /// - Returns: Interceptors to use when invoking 'unreceivedAcks'.
  func makeUnreceivedAcksInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>]
}

internal enum Ibc_Core_Channel_V2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.channel.v2.Query",
    methods: [
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.nextSequenceSend,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitment,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetCommitments,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgement,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetAcknowledgements,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.packetReceipt,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedPackets,
      Ibc_Core_Channel_V2_QueryClientMetadata.Methods.unreceivedAcks,
    ]
  )

  internal enum Methods {
    internal static let nextSequenceSend = GRPCMethodDescriptor(
      name: "NextSequenceSend",
      path: "/ibc.core.channel.v2.Query/NextSequenceSend",
      type: GRPCCallType.unary
    )

    internal static let packetCommitment = GRPCMethodDescriptor(
      name: "PacketCommitment",
      path: "/ibc.core.channel.v2.Query/PacketCommitment",
      type: GRPCCallType.unary
    )

    internal static let packetCommitments = GRPCMethodDescriptor(
      name: "PacketCommitments",
      path: "/ibc.core.channel.v2.Query/PacketCommitments",
      type: GRPCCallType.unary
    )

    internal static let packetAcknowledgement = GRPCMethodDescriptor(
      name: "PacketAcknowledgement",
      path: "/ibc.core.channel.v2.Query/PacketAcknowledgement",
      type: GRPCCallType.unary
    )

    internal static let packetAcknowledgements = GRPCMethodDescriptor(
      name: "PacketAcknowledgements",
      path: "/ibc.core.channel.v2.Query/PacketAcknowledgements",
      type: GRPCCallType.unary
    )

    internal static let packetReceipt = GRPCMethodDescriptor(
      name: "PacketReceipt",
      path: "/ibc.core.channel.v2.Query/PacketReceipt",
      type: GRPCCallType.unary
    )

    internal static let unreceivedPackets = GRPCMethodDescriptor(
      name: "UnreceivedPackets",
      path: "/ibc.core.channel.v2.Query/UnreceivedPackets",
      type: GRPCCallType.unary
    )

    internal static let unreceivedAcks = GRPCMethodDescriptor(
      name: "UnreceivedAcks",
      path: "/ibc.core.channel.v2.Query/UnreceivedAcks",
      type: GRPCCallType.unary
    )
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Core_Channel_V2_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Channel_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// NextSequenceSend returns the next send sequence for a given channel.
  func nextSequenceSend(request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>

  /// PacketCommitment queries a stored packet commitment hash.
  func packetCommitment(request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>

  /// PacketCommitments queries a stored packet commitment hash.
  func packetCommitments(request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>

  /// PacketAcknowledgement queries a stored acknowledgement commitment hash.
  func packetAcknowledgement(request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>

  /// PacketAcknowledgements returns all packet acknowledgements associated with a channel.
  func packetAcknowledgements(request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>

  /// PacketReceipt queries a stored packet receipt.
  func packetReceipt(request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryPacketReceiptResponse>

  /// UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
  func unreceivedPackets(request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>

  /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
  func unreceivedAcks(request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>
}

extension Ibc_Core_Channel_V2_QueryProvider {
  internal var serviceName: Substring {
    return Ibc_Core_Channel_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NextSequenceSend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>(),
        interceptors: self.interceptors?.makeNextSequenceSendInterceptors() ?? [],
        userFunction: self.nextSequenceSend(request:context:)
      )

    case "PacketCommitment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>(),
        interceptors: self.interceptors?.makePacketCommitmentInterceptors() ?? [],
        userFunction: self.packetCommitment(request:context:)
      )

    case "PacketCommitments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>(),
        interceptors: self.interceptors?.makePacketCommitmentsInterceptors() ?? [],
        userFunction: self.packetCommitments(request:context:)
      )

    case "PacketAcknowledgement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>(),
        interceptors: self.interceptors?.makePacketAcknowledgementInterceptors() ?? [],
        userFunction: self.packetAcknowledgement(request:context:)
      )

    case "PacketAcknowledgements":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>(),
        interceptors: self.interceptors?.makePacketAcknowledgementsInterceptors() ?? [],
        userFunction: self.packetAcknowledgements(request:context:)
      )

    case "PacketReceipt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketReceiptRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketReceiptResponse>(),
        interceptors: self.interceptors?.makePacketReceiptInterceptors() ?? [],
        userFunction: self.packetReceipt(request:context:)
      )

    case "UnreceivedPackets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>(),
        interceptors: self.interceptors?.makeUnreceivedPacketsInterceptors() ?? [],
        userFunction: self.unreceivedPackets(request:context:)
      )

    case "UnreceivedAcks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>(),
        interceptors: self.interceptors?.makeUnreceivedAcksInterceptors() ?? [],
        userFunction: self.unreceivedAcks(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query provides defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Channel_V2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Channel_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// NextSequenceSend returns the next send sequence for a given channel.
  @Sendable func nextSequenceSend(
    request: Ibc_Core_Channel_V2_QueryNextSequenceSendRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryNextSequenceSendResponse

  /// PacketCommitment queries a stored packet commitment hash.
  @Sendable func packetCommitment(
    request: Ibc_Core_Channel_V2_QueryPacketCommitmentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketCommitmentResponse

  /// PacketCommitments queries a stored packet commitment hash.
  @Sendable func packetCommitments(
    request: Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse

  /// PacketAcknowledgement queries a stored acknowledgement commitment hash.
  @Sendable func packetAcknowledgement(
    request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse

  /// PacketAcknowledgements returns all packet acknowledgements associated with a channel.
  @Sendable func packetAcknowledgements(
    request: Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse

  /// PacketReceipt queries a stored packet receipt.
  @Sendable func packetReceipt(
    request: Ibc_Core_Channel_V2_QueryPacketReceiptRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryPacketReceiptResponse

  /// UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
  @Sendable func unreceivedPackets(
    request: Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse

  /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
  @Sendable func unreceivedAcks(
    request: Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Channel_V2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ibc_Core_Channel_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ibc_Core_Channel_V2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NextSequenceSend":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>(),
        interceptors: self.interceptors?.makeNextSequenceSendInterceptors() ?? [],
        wrapping: self.nextSequenceSend(request:context:)
      )

    case "PacketCommitment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>(),
        interceptors: self.interceptors?.makePacketCommitmentInterceptors() ?? [],
        wrapping: self.packetCommitment(request:context:)
      )

    case "PacketCommitments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>(),
        interceptors: self.interceptors?.makePacketCommitmentsInterceptors() ?? [],
        wrapping: self.packetCommitments(request:context:)
      )

    case "PacketAcknowledgement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>(),
        interceptors: self.interceptors?.makePacketAcknowledgementInterceptors() ?? [],
        wrapping: self.packetAcknowledgement(request:context:)
      )

    case "PacketAcknowledgements":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>(),
        interceptors: self.interceptors?.makePacketAcknowledgementsInterceptors() ?? [],
        wrapping: self.packetAcknowledgements(request:context:)
      )

    case "PacketReceipt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryPacketReceiptRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryPacketReceiptResponse>(),
        interceptors: self.interceptors?.makePacketReceiptInterceptors() ?? [],
        wrapping: self.packetReceipt(request:context:)
      )

    case "UnreceivedPackets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>(),
        interceptors: self.interceptors?.makeUnreceivedPacketsInterceptors() ?? [],
        wrapping: self.unreceivedPackets(request:context:)
      )

    case "UnreceivedAcks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>(),
        interceptors: self.interceptors?.makeUnreceivedAcksInterceptors() ?? [],
        wrapping: self.unreceivedAcks(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Core_Channel_V2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'nextSequenceSend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextSequenceSendInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryNextSequenceSendRequest, Ibc_Core_Channel_V2_QueryNextSequenceSendResponse>]

  /// - Returns: Interceptors to use when handling 'packetCommitment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePacketCommitmentInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryPacketCommitmentRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentResponse>]

  /// - Returns: Interceptors to use when handling 'packetCommitments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePacketCommitmentsInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryPacketCommitmentsRequest, Ibc_Core_Channel_V2_QueryPacketCommitmentsResponse>]

  /// - Returns: Interceptors to use when handling 'packetAcknowledgement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePacketAcknowledgementInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryPacketAcknowledgementRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementResponse>]

  /// - Returns: Interceptors to use when handling 'packetAcknowledgements'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePacketAcknowledgementsInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryPacketAcknowledgementsRequest, Ibc_Core_Channel_V2_QueryPacketAcknowledgementsResponse>]

  /// - Returns: Interceptors to use when handling 'packetReceipt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePacketReceiptInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryPacketReceiptRequest, Ibc_Core_Channel_V2_QueryPacketReceiptResponse>]

  /// - Returns: Interceptors to use when handling 'unreceivedPackets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnreceivedPacketsInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryUnreceivedPacketsRequest, Ibc_Core_Channel_V2_QueryUnreceivedPacketsResponse>]

  /// - Returns: Interceptors to use when handling 'unreceivedAcks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnreceivedAcksInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V2_QueryUnreceivedAcksRequest, Ibc_Core_Channel_V2_QueryUnreceivedAcksResponse>]
}

internal enum Ibc_Core_Channel_V2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.channel.v2.Query",
    methods: [
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.nextSequenceSend,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.packetCommitment,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.packetCommitments,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.packetAcknowledgement,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.packetAcknowledgements,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.packetReceipt,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.unreceivedPackets,
      Ibc_Core_Channel_V2_QueryServerMetadata.Methods.unreceivedAcks,
    ]
  )

  internal enum Methods {
    internal static let nextSequenceSend = GRPCMethodDescriptor(
      name: "NextSequenceSend",
      path: "/ibc.core.channel.v2.Query/NextSequenceSend",
      type: GRPCCallType.unary
    )

    internal static let packetCommitment = GRPCMethodDescriptor(
      name: "PacketCommitment",
      path: "/ibc.core.channel.v2.Query/PacketCommitment",
      type: GRPCCallType.unary
    )

    internal static let packetCommitments = GRPCMethodDescriptor(
      name: "PacketCommitments",
      path: "/ibc.core.channel.v2.Query/PacketCommitments",
      type: GRPCCallType.unary
    )

    internal static let packetAcknowledgement = GRPCMethodDescriptor(
      name: "PacketAcknowledgement",
      path: "/ibc.core.channel.v2.Query/PacketAcknowledgement",
      type: GRPCCallType.unary
    )

    internal static let packetAcknowledgements = GRPCMethodDescriptor(
      name: "PacketAcknowledgements",
      path: "/ibc.core.channel.v2.Query/PacketAcknowledgements",
      type: GRPCCallType.unary
    )

    internal static let packetReceipt = GRPCMethodDescriptor(
      name: "PacketReceipt",
      path: "/ibc.core.channel.v2.Query/PacketReceipt",
      type: GRPCCallType.unary
    )

    internal static let unreceivedPackets = GRPCMethodDescriptor(
      name: "UnreceivedPackets",
      path: "/ibc.core.channel.v2.Query/UnreceivedPackets",
      type: GRPCCallType.unary
    )

    internal static let unreceivedAcks = GRPCMethodDescriptor(
      name: "UnreceivedAcks",
      path: "/ibc.core.channel.v2.Query/UnreceivedAcks",
      type: GRPCCallType.unary
    )
  }
}
