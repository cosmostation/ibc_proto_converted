//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/client/v2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Ibc_Core_Client_V2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Core_Client_V2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? { get }

  func counterpartyInfo(
    _ request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>

  func config(
    _ request: Ibc_Core_Client_V2_QueryConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse>
}

extension Ibc_Core_Client_V2_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.core.client.v2.Query"
  }

  /// CounterpartyInfo queries an IBC light counter party info.
  ///
  /// - Parameters:
  ///   - request: Request to send to CounterpartyInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func counterpartyInfo(
    _ request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.counterpartyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyInfoInterceptors() ?? []
    )
  }

  /// Config queries the IBC client v2 configuration for a given client.
  ///
  /// - Parameters:
  ///   - request: Request to send to Config.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func config(
    _ request: Ibc_Core_Client_V2_QueryConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.config.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ibc_Core_Client_V2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ibc_Core_Client_V2_QueryNIOClient")
internal final class Ibc_Core_Client_V2_QueryClient: Ibc_Core_Client_V2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.client.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ibc_Core_Client_V2_QueryNIOClient: Ibc_Core_Client_V2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.client.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Client_V2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? { get }

  func makeCounterpartyInfoCall(
    _ request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>

  func makeConfigCall(
    _ request: Ibc_Core_Client_V2_QueryConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCounterpartyInfoCall(
    _ request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.counterpartyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyInfoInterceptors() ?? []
    )
  }

  internal func makeConfigCall(
    _ request: Ibc_Core_Client_V2_QueryConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.config.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_QueryAsyncClientProtocol {
  internal func counterpartyInfo(
    _ request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V2_QueryCounterpartyInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.counterpartyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyInfoInterceptors() ?? []
    )
  }

  internal func config(
    _ request: Ibc_Core_Client_V2_QueryConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V2_QueryConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V2_QueryClientMetadata.Methods.config.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ibc_Core_Client_V2_QueryAsyncClient: Ibc_Core_Client_V2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ibc_Core_Client_V2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'counterpartyInfo'.
  func makeCounterpartyInfoInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'config'.
  func makeConfigInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse>]
}

internal enum Ibc_Core_Client_V2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.client.v2.Query",
    methods: [
      Ibc_Core_Client_V2_QueryClientMetadata.Methods.counterpartyInfo,
      Ibc_Core_Client_V2_QueryClientMetadata.Methods.config,
    ]
  )

  internal enum Methods {
    internal static let counterpartyInfo = GRPCMethodDescriptor(
      name: "CounterpartyInfo",
      path: "/ibc.core.client.v2.Query/CounterpartyInfo",
      type: GRPCCallType.unary
    )

    internal static let config = GRPCMethodDescriptor(
      name: "Config",
      path: "/ibc.core.client.v2.Query/Config",
      type: GRPCCallType.unary
    )
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Core_Client_V2_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Client_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// CounterpartyInfo queries an IBC light counter party info.
  func counterpartyInfo(request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>

  /// Config queries the IBC client v2 configuration for a given client.
  func config(request: Ibc_Core_Client_V2_QueryConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V2_QueryConfigResponse>
}

extension Ibc_Core_Client_V2_QueryProvider {
  internal var serviceName: Substring {
    return Ibc_Core_Client_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CounterpartyInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>(),
        interceptors: self.interceptors?.makeCounterpartyInfoInterceptors() ?? [],
        userFunction: self.counterpartyInfo(request:context:)
      )

    case "Config":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_QueryConfigRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_QueryConfigResponse>(),
        interceptors: self.interceptors?.makeConfigInterceptors() ?? [],
        userFunction: self.config(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query provides defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Client_V2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// CounterpartyInfo queries an IBC light counter party info.
  @Sendable func counterpartyInfo(
    request: Ibc_Core_Client_V2_QueryCounterpartyInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V2_QueryCounterpartyInfoResponse

  /// Config queries the IBC client v2 configuration for a given client.
  @Sendable func config(
    request: Ibc_Core_Client_V2_QueryConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V2_QueryConfigResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ibc_Core_Client_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ibc_Core_Client_V2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CounterpartyInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>(),
        interceptors: self.interceptors?.makeCounterpartyInfoInterceptors() ?? [],
        wrapping: self.counterpartyInfo(request:context:)
      )

    case "Config":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_QueryConfigRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_QueryConfigResponse>(),
        interceptors: self.interceptors?.makeConfigInterceptors() ?? [],
        wrapping: self.config(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Core_Client_V2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'counterpartyInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCounterpartyInfoInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V2_QueryCounterpartyInfoRequest, Ibc_Core_Client_V2_QueryCounterpartyInfoResponse>]

  /// - Returns: Interceptors to use when handling 'config'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V2_QueryConfigRequest, Ibc_Core_Client_V2_QueryConfigResponse>]
}

internal enum Ibc_Core_Client_V2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.client.v2.Query",
    methods: [
      Ibc_Core_Client_V2_QueryServerMetadata.Methods.counterpartyInfo,
      Ibc_Core_Client_V2_QueryServerMetadata.Methods.config,
    ]
  )

  internal enum Methods {
    internal static let counterpartyInfo = GRPCMethodDescriptor(
      name: "CounterpartyInfo",
      path: "/ibc.core.client.v2.Query/CounterpartyInfo",
      type: GRPCCallType.unary
    )

    internal static let config = GRPCMethodDescriptor(
      name: "Config",
      path: "/ibc.core.client.v2.Query/Config",
      type: GRPCCallType.unary
    )
  }
}
