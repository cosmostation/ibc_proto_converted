// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stratos/register/v1_1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateResourceNode encapsulates an MsgCreateResourceNodeTx transaction as an SDK message.
struct Stratos_Register_V11_MsgCreateResourceNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var networkAddress: String = String()

  var pubkey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _pubkey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_pubkey = newValue}
  }
  /// Returns true if `pubkey` has been explicitly set.
  var hasPubkey: Bool {return self._pubkey != nil}
  /// Clears the value of `pubkey`. Subsequent reads from it will return its default value.
  mutating func clearPubkey() {self._pubkey = nil}

  var value: Cosmos_Base_V1beta1_Coin {
    get {return _value ?? Cosmos_Base_V1beta1_Coin()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var ownerAddress: String = String()

  var description_p: Stratos_Register_V11_Description {
    get {return _description_p ?? Stratos_Register_V11_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var nodeType: UInt32 = 0

  var beneficiaryAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pubkey: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _value: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _description_p: Stratos_Register_V11_Description? = nil
}

/// MsgCreateMetaNode encapsulates an MsgCreateMetaNodeTx transaction as an SDK message.
struct Stratos_Register_V11_MsgCreateMetaNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var networkAddress: String = String()

  var pubkey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _pubkey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_pubkey = newValue}
  }
  /// Returns true if `pubkey` has been explicitly set.
  var hasPubkey: Bool {return self._pubkey != nil}
  /// Clears the value of `pubkey`. Subsequent reads from it will return its default value.
  mutating func clearPubkey() {self._pubkey = nil}

  var value: Cosmos_Base_V1beta1_Coin {
    get {return _value ?? Cosmos_Base_V1beta1_Coin()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var ownerAddress: String = String()

  var description_p: Stratos_Register_V11_Description {
    get {return _description_p ?? Stratos_Register_V11_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var beneficiaryAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pubkey: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _value: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _description_p: Stratos_Register_V11_Description? = nil
}

/// MsgUpdateResourceNode defines a SDK message for updating an existing resource node.
struct Stratos_Register_V11_MsgUpdateResourceNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Stratos_Register_V11_Description {
    get {return _description_p ?? Stratos_Register_V11_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var networkAddress: String = String()

  var ownerAddress: String = String()

  var nodeType: UInt32 = 0

  var beneficiaryAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Stratos_Register_V11_Description? = nil
}

/// MsgUpdateMetaNode defines a SDK message for updating an existing meta node.
struct Stratos_Register_V11_MsgUpdateMetaNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Stratos_Register_V11_Description {
    get {return _description_p ?? Stratos_Register_V11_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var networkAddress: String = String()

  var ownerAddress: String = String()

  var beneficiaryAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Stratos_Register_V11_Description? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stratos_Register_V11_MsgCreateResourceNode: @unchecked Sendable {}
extension Stratos_Register_V11_MsgCreateMetaNode: @unchecked Sendable {}
extension Stratos_Register_V11_MsgUpdateResourceNode: @unchecked Sendable {}
extension Stratos_Register_V11_MsgUpdateMetaNode: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stratos.register.v1_1"

extension Stratos_Register_V11_MsgCreateResourceNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateResourceNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_address"),
    2: .same(proto: "pubkey"),
    3: .same(proto: "value"),
    4: .standard(proto: "owner_address"),
    5: .same(proto: "description"),
    6: .standard(proto: "node_type"),
    7: .standard(proto: "beneficiary_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pubkey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.nodeType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.beneficiaryAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 1)
    }
    try { if let v = self._pubkey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 4)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.nodeType != 0 {
      try visitor.visitSingularUInt32Field(value: self.nodeType, fieldNumber: 6)
    }
    if !self.beneficiaryAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.beneficiaryAddress, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V11_MsgCreateResourceNode, rhs: Stratos_Register_V11_MsgCreateResourceNode) -> Bool {
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs._pubkey != rhs._pubkey {return false}
    if lhs._value != rhs._value {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.nodeType != rhs.nodeType {return false}
    if lhs.beneficiaryAddress != rhs.beneficiaryAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Register_V11_MsgCreateMetaNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateMetaNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_address"),
    2: .same(proto: "pubkey"),
    3: .same(proto: "value"),
    4: .standard(proto: "owner_address"),
    5: .same(proto: "description"),
    6: .standard(proto: "beneficiary_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pubkey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.beneficiaryAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 1)
    }
    try { if let v = self._pubkey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 4)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.beneficiaryAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.beneficiaryAddress, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V11_MsgCreateMetaNode, rhs: Stratos_Register_V11_MsgCreateMetaNode) -> Bool {
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs._pubkey != rhs._pubkey {return false}
    if lhs._value != rhs._value {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.beneficiaryAddress != rhs.beneficiaryAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Register_V11_MsgUpdateResourceNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateResourceNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .standard(proto: "network_address"),
    3: .standard(proto: "owner_address"),
    4: .standard(proto: "node_type"),
    5: .standard(proto: "beneficiary_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.nodeType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.beneficiaryAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 2)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 3)
    }
    if self.nodeType != 0 {
      try visitor.visitSingularUInt32Field(value: self.nodeType, fieldNumber: 4)
    }
    if !self.beneficiaryAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.beneficiaryAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V11_MsgUpdateResourceNode, rhs: Stratos_Register_V11_MsgUpdateResourceNode) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.nodeType != rhs.nodeType {return false}
    if lhs.beneficiaryAddress != rhs.beneficiaryAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Register_V11_MsgUpdateMetaNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateMetaNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .standard(proto: "network_address"),
    3: .standard(proto: "owner_address"),
    4: .standard(proto: "beneficiary_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.beneficiaryAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 2)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 3)
    }
    if !self.beneficiaryAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.beneficiaryAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V11_MsgUpdateMetaNode, rhs: Stratos_Register_V11_MsgUpdateMetaNode) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.beneficiaryAddress != rhs.beneficiaryAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
