// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stratos/pot/v1/pot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the PoT module parameters
struct Stratos_Pot_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bondDenom: String = String()

  var rewardDenom: String = String()

  var matureEpoch: Int64 = 0

  var miningRewardParams: [Stratos_Pot_V1_MiningRewardParam] = []

  var communityTax: String = String()

  var initialTotalSupply: Cosmos_Base_V1beta1_Coin {
    get {return _initialTotalSupply ?? Cosmos_Base_V1beta1_Coin()}
    set {_initialTotalSupply = newValue}
  }
  /// Returns true if `initialTotalSupply` has been explicitly set.
  var hasInitialTotalSupply: Bool {return self._initialTotalSupply != nil}
  /// Clears the value of `initialTotalSupply`. Subsequent reads from it will return its default value.
  mutating func clearInitialTotalSupply() {self._initialTotalSupply = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _initialTotalSupply: Cosmos_Base_V1beta1_Coin? = nil
}

struct Stratos_Pot_V1_MiningRewardParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var totalMinedValveStart: Cosmos_Base_V1beta1_Coin {
    get {return _totalMinedValveStart ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalMinedValveStart = newValue}
  }
  /// Returns true if `totalMinedValveStart` has been explicitly set.
  var hasTotalMinedValveStart: Bool {return self._totalMinedValveStart != nil}
  /// Clears the value of `totalMinedValveStart`. Subsequent reads from it will return its default value.
  mutating func clearTotalMinedValveStart() {self._totalMinedValveStart = nil}

  var totalMinedValveEnd: Cosmos_Base_V1beta1_Coin {
    get {return _totalMinedValveEnd ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalMinedValveEnd = newValue}
  }
  /// Returns true if `totalMinedValveEnd` has been explicitly set.
  var hasTotalMinedValveEnd: Bool {return self._totalMinedValveEnd != nil}
  /// Clears the value of `totalMinedValveEnd`. Subsequent reads from it will return its default value.
  mutating func clearTotalMinedValveEnd() {self._totalMinedValveEnd = nil}

  var miningReward: Cosmos_Base_V1beta1_Coin {
    get {return _miningReward ?? Cosmos_Base_V1beta1_Coin()}
    set {_miningReward = newValue}
  }
  /// Returns true if `miningReward` has been explicitly set.
  var hasMiningReward: Bool {return self._miningReward != nil}
  /// Clears the value of `miningReward`. Subsequent reads from it will return its default value.
  mutating func clearMiningReward() {self._miningReward = nil}

  var blockChainPercentageInBp: String = String()

  var resourceNodePercentageInBp: String = String()

  var metaNodePercentageInBp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalMinedValveStart: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _totalMinedValveEnd: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _miningReward: Cosmos_Base_V1beta1_Coin? = nil
}

struct Stratos_Pot_V1_Reward {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var walletAddress: String = String()

  var rewardFromMiningPool: [Cosmos_Base_V1beta1_Coin] = []

  var rewardFromTrafficPool: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_SingleWalletVolume {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var walletAddress: String = String()

  var volume: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_WalletVolumes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var volumes: [Stratos_Pot_V1_SingleWalletVolume] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_VolumeReportRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reporter: String = String()

  var reportReference: String = String()

  var txHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_TotalReward {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var miningReward: [Cosmos_Base_V1beta1_Coin] = []

  var trafficReward: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stratos_Pot_V1_Metrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var totalSupply: String = String()

  var totalMiningSupply: String = String()

  var totalMinedTokens: String = String()

  var totalResourceNodesDeposit: String = String()

  var totalBondedDelegation: String = String()

  var totalUnbondedDelegation: String = String()

  var totalUnbondingDelegation: String = String()

  var circulationSupply: String = String()

  var totalMiningReward: String = String()

  var chainMiningReward: String = String()

  var resourceMiningReward: String = String()

  var metaMiningReward: String = String()

  var resourceNodeDeposit: String = String()

  var metaNodeDeposit: String = String()

  var unissuedPrepay: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stratos_Pot_V1_Params: @unchecked Sendable {}
extension Stratos_Pot_V1_MiningRewardParam: @unchecked Sendable {}
extension Stratos_Pot_V1_Reward: @unchecked Sendable {}
extension Stratos_Pot_V1_SingleWalletVolume: @unchecked Sendable {}
extension Stratos_Pot_V1_WalletVolumes: @unchecked Sendable {}
extension Stratos_Pot_V1_VolumeReportRecord: @unchecked Sendable {}
extension Stratos_Pot_V1_TotalReward: @unchecked Sendable {}
extension Stratos_Pot_V1_Metrics: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stratos.pot.v1"

extension Stratos_Pot_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bond_denom"),
    2: .standard(proto: "reward_denom"),
    3: .standard(proto: "mature_epoch"),
    4: .standard(proto: "mining_reward_params"),
    5: .standard(proto: "community_tax"),
    6: .standard(proto: "initial_total_supply"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bondDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rewardDenom) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.matureEpoch) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.miningRewardParams) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.communityTax) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._initialTotalSupply) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bondDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.bondDenom, fieldNumber: 1)
    }
    if !self.rewardDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardDenom, fieldNumber: 2)
    }
    if self.matureEpoch != 0 {
      try visitor.visitSingularInt64Field(value: self.matureEpoch, fieldNumber: 3)
    }
    if !self.miningRewardParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.miningRewardParams, fieldNumber: 4)
    }
    if !self.communityTax.isEmpty {
      try visitor.visitSingularStringField(value: self.communityTax, fieldNumber: 5)
    }
    try { if let v = self._initialTotalSupply {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_Params, rhs: Stratos_Pot_V1_Params) -> Bool {
    if lhs.bondDenom != rhs.bondDenom {return false}
    if lhs.rewardDenom != rhs.rewardDenom {return false}
    if lhs.matureEpoch != rhs.matureEpoch {return false}
    if lhs.miningRewardParams != rhs.miningRewardParams {return false}
    if lhs.communityTax != rhs.communityTax {return false}
    if lhs._initialTotalSupply != rhs._initialTotalSupply {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_MiningRewardParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MiningRewardParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_mined_valve_start"),
    2: .standard(proto: "total_mined_valve_end"),
    3: .standard(proto: "mining_reward"),
    4: .standard(proto: "block_chain_percentage_in_bp"),
    5: .standard(proto: "resource_node_percentage_in_bp"),
    6: .standard(proto: "meta_node_percentage_in_bp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._totalMinedValveStart) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._totalMinedValveEnd) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._miningReward) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.blockChainPercentageInBp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resourceNodePercentageInBp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.metaNodePercentageInBp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._totalMinedValveStart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._totalMinedValveEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._miningReward {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.blockChainPercentageInBp.isEmpty {
      try visitor.visitSingularStringField(value: self.blockChainPercentageInBp, fieldNumber: 4)
    }
    if !self.resourceNodePercentageInBp.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceNodePercentageInBp, fieldNumber: 5)
    }
    if !self.metaNodePercentageInBp.isEmpty {
      try visitor.visitSingularStringField(value: self.metaNodePercentageInBp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_MiningRewardParam, rhs: Stratos_Pot_V1_MiningRewardParam) -> Bool {
    if lhs._totalMinedValveStart != rhs._totalMinedValveStart {return false}
    if lhs._totalMinedValveEnd != rhs._totalMinedValveEnd {return false}
    if lhs._miningReward != rhs._miningReward {return false}
    if lhs.blockChainPercentageInBp != rhs.blockChainPercentageInBp {return false}
    if lhs.resourceNodePercentageInBp != rhs.resourceNodePercentageInBp {return false}
    if lhs.metaNodePercentageInBp != rhs.metaNodePercentageInBp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_Reward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Reward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wallet_address"),
    2: .standard(proto: "reward_from_mining_pool"),
    3: .standard(proto: "reward_from_traffic_pool"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.walletAddress) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardFromMiningPool) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.rewardFromTrafficPool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.walletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.walletAddress, fieldNumber: 1)
    }
    if !self.rewardFromMiningPool.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardFromMiningPool, fieldNumber: 2)
    }
    if !self.rewardFromTrafficPool.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardFromTrafficPool, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_Reward, rhs: Stratos_Pot_V1_Reward) -> Bool {
    if lhs.walletAddress != rhs.walletAddress {return false}
    if lhs.rewardFromMiningPool != rhs.rewardFromMiningPool {return false}
    if lhs.rewardFromTrafficPool != rhs.rewardFromTrafficPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_SingleWalletVolume: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SingleWalletVolume"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wallet_address"),
    2: .same(proto: "volume"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.walletAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.volume) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.walletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.walletAddress, fieldNumber: 1)
    }
    if !self.volume.isEmpty {
      try visitor.visitSingularStringField(value: self.volume, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_SingleWalletVolume, rhs: Stratos_Pot_V1_SingleWalletVolume) -> Bool {
    if lhs.walletAddress != rhs.walletAddress {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_WalletVolumes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WalletVolumes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "volumes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.volumes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.volumes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.volumes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_WalletVolumes, rhs: Stratos_Pot_V1_WalletVolumes) -> Bool {
    if lhs.volumes != rhs.volumes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_VolumeReportRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeReportRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reporter"),
    2: .standard(proto: "report_reference"),
    3: .standard(proto: "tx_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reporter) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reportReference) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reporter.isEmpty {
      try visitor.visitSingularStringField(value: self.reporter, fieldNumber: 1)
    }
    if !self.reportReference.isEmpty {
      try visitor.visitSingularStringField(value: self.reportReference, fieldNumber: 2)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_VolumeReportRecord, rhs: Stratos_Pot_V1_VolumeReportRecord) -> Bool {
    if lhs.reporter != rhs.reporter {return false}
    if lhs.reportReference != rhs.reportReference {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_TotalReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TotalReward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mining_reward"),
    2: .standard(proto: "traffic_reward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.miningReward) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.trafficReward) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.miningReward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.miningReward, fieldNumber: 1)
    }
    if !self.trafficReward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trafficReward, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_TotalReward, rhs: Stratos_Pot_V1_TotalReward) -> Bool {
    if lhs.miningReward != rhs.miningReward {return false}
    if lhs.trafficReward != rhs.trafficReward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Pot_V1_Metrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_supply"),
    2: .standard(proto: "total_mining_supply"),
    3: .standard(proto: "total_mined_tokens"),
    4: .standard(proto: "total_resource_nodes_deposit"),
    5: .standard(proto: "total_bonded_delegation"),
    6: .standard(proto: "total_unbonded_delegation"),
    7: .standard(proto: "total_unbonding_delegation"),
    8: .standard(proto: "circulation_supply"),
    9: .standard(proto: "total_mining_reward"),
    10: .standard(proto: "chain_mining_reward"),
    11: .standard(proto: "resource_mining_reward"),
    12: .standard(proto: "meta_mining_reward"),
    13: .standard(proto: "resource_node_deposit"),
    14: .standard(proto: "meta_node_deposit"),
    15: .standard(proto: "unissued_prepay"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.totalSupply) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.totalMiningSupply) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.totalMinedTokens) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.totalResourceNodesDeposit) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.totalBondedDelegation) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.totalUnbondedDelegation) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.totalUnbondingDelegation) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.circulationSupply) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.totalMiningReward) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.chainMiningReward) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.resourceMiningReward) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.metaMiningReward) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.resourceNodeDeposit) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.metaNodeDeposit) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.unissuedPrepay) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.totalSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.totalSupply, fieldNumber: 1)
    }
    if !self.totalMiningSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.totalMiningSupply, fieldNumber: 2)
    }
    if !self.totalMinedTokens.isEmpty {
      try visitor.visitSingularStringField(value: self.totalMinedTokens, fieldNumber: 3)
    }
    if !self.totalResourceNodesDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.totalResourceNodesDeposit, fieldNumber: 4)
    }
    if !self.totalBondedDelegation.isEmpty {
      try visitor.visitSingularStringField(value: self.totalBondedDelegation, fieldNumber: 5)
    }
    if !self.totalUnbondedDelegation.isEmpty {
      try visitor.visitSingularStringField(value: self.totalUnbondedDelegation, fieldNumber: 6)
    }
    if !self.totalUnbondingDelegation.isEmpty {
      try visitor.visitSingularStringField(value: self.totalUnbondingDelegation, fieldNumber: 7)
    }
    if !self.circulationSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.circulationSupply, fieldNumber: 8)
    }
    if !self.totalMiningReward.isEmpty {
      try visitor.visitSingularStringField(value: self.totalMiningReward, fieldNumber: 9)
    }
    if !self.chainMiningReward.isEmpty {
      try visitor.visitSingularStringField(value: self.chainMiningReward, fieldNumber: 10)
    }
    if !self.resourceMiningReward.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceMiningReward, fieldNumber: 11)
    }
    if !self.metaMiningReward.isEmpty {
      try visitor.visitSingularStringField(value: self.metaMiningReward, fieldNumber: 12)
    }
    if !self.resourceNodeDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceNodeDeposit, fieldNumber: 13)
    }
    if !self.metaNodeDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.metaNodeDeposit, fieldNumber: 14)
    }
    if !self.unissuedPrepay.isEmpty {
      try visitor.visitSingularStringField(value: self.unissuedPrepay, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Pot_V1_Metrics, rhs: Stratos_Pot_V1_Metrics) -> Bool {
    if lhs.totalSupply != rhs.totalSupply {return false}
    if lhs.totalMiningSupply != rhs.totalMiningSupply {return false}
    if lhs.totalMinedTokens != rhs.totalMinedTokens {return false}
    if lhs.totalResourceNodesDeposit != rhs.totalResourceNodesDeposit {return false}
    if lhs.totalBondedDelegation != rhs.totalBondedDelegation {return false}
    if lhs.totalUnbondedDelegation != rhs.totalUnbondedDelegation {return false}
    if lhs.totalUnbondingDelegation != rhs.totalUnbondingDelegation {return false}
    if lhs.circulationSupply != rhs.circulationSupply {return false}
    if lhs.totalMiningReward != rhs.totalMiningReward {return false}
    if lhs.chainMiningReward != rhs.chainMiningReward {return false}
    if lhs.resourceMiningReward != rhs.resourceMiningReward {return false}
    if lhs.metaMiningReward != rhs.metaMiningReward {return false}
    if lhs.resourceNodeDeposit != rhs.resourceNodeDeposit {return false}
    if lhs.metaNodeDeposit != rhs.metaNodeDeposit {return false}
    if lhs.unissuedPrepay != rhs.unissuedPrepay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
