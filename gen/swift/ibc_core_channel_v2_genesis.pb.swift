// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/channel/v2/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the ibc channel/v2 submodule's genesis state.
struct Ibc_Core_Channel_V2_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var acknowledgements: [Ibc_Core_Channel_V2_PacketState] = []

  var commitments: [Ibc_Core_Channel_V2_PacketState] = []

  var receipts: [Ibc_Core_Channel_V2_PacketState] = []

  var asyncPackets: [Ibc_Core_Channel_V2_PacketState] = []

  var sendSequences: [Ibc_Core_Channel_V2_PacketSequence] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PacketState defines the generic type necessary to retrieve and store
/// packet commitments, acknowledgements, and receipts.
/// Caller is responsible for knowing the context necessary to interpret this
/// state as a commitment, acknowledgement, or a receipt.
struct Ibc_Core_Channel_V2_PacketState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// client unique identifier.
  var clientID: String = String()

  /// packet sequence.
  var sequence: UInt64 = 0

  /// embedded data that represents packet state.
  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PacketSequence defines the genesis type necessary to retrieve and store next send sequences.
struct Ibc_Core_Channel_V2_PacketSequence {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// client unique identifier.
  var clientID: String = String()

  /// packet sequence
  var sequence: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ibc_Core_Channel_V2_GenesisState: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_PacketState: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_PacketSequence: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.channel.v2"

extension Ibc_Core_Channel_V2_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "acknowledgements"),
    3: .same(proto: "commitments"),
    4: .same(proto: "receipts"),
    5: .standard(proto: "async_packets"),
    6: .standard(proto: "send_sequences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.acknowledgements) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.commitments) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.receipts) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.asyncPackets) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.sendSequences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.acknowledgements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acknowledgements, fieldNumber: 2)
    }
    if !self.commitments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commitments, fieldNumber: 3)
    }
    if !self.receipts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.receipts, fieldNumber: 4)
    }
    if !self.asyncPackets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.asyncPackets, fieldNumber: 5)
    }
    if !self.sendSequences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sendSequences, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_GenesisState, rhs: Ibc_Core_Channel_V2_GenesisState) -> Bool {
    if lhs.acknowledgements != rhs.acknowledgements {return false}
    if lhs.commitments != rhs.commitments {return false}
    if lhs.receipts != rhs.receipts {return false}
    if lhs.asyncPackets != rhs.asyncPackets {return false}
    if lhs.sendSequences != rhs.sendSequences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_PacketState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "sequence"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_PacketState, rhs: Ibc_Core_Channel_V2_PacketState) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_PacketSequence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketSequence"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "sequence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_PacketSequence, rhs: Ibc_Core_Channel_V2_PacketSequence) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
