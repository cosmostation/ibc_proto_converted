// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stratos/register/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the register module's genesis state.
struct Stratos_Register_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stratos_Register_V1_Params {
    get {return _storage._params ?? Stratos_Register_V1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var resourceNodes: [Stratos_Register_V1_ResourceNode] {
    get {return _storage._resourceNodes}
    set {_uniqueStorage()._resourceNodes = newValue}
  }

  var metaNodes: [Stratos_Register_V1_MetaNode] {
    get {return _storage._metaNodes}
    set {_uniqueStorage()._metaNodes = newValue}
  }

  /// remaining noz limit
  var remainingNozLimit: String {
    get {return _storage._remainingNozLimit}
    set {_uniqueStorage()._remainingNozLimit = newValue}
  }

  var slashing: [Stratos_Register_V1_Slashing] {
    get {return _storage._slashing}
    set {_uniqueStorage()._slashing = newValue}
  }

  ///fixed rate of deposit over noz
  var depositNozRate: String {
    get {return _storage._depositNozRate}
    set {_uniqueStorage()._depositNozRate = newValue}
  }

  var metaNodeRegVotePool: [Stratos_Register_V1_MetaNodeRegistrationVotePool] {
    get {return _storage._metaNodeRegVotePool}
    set {_uniqueStorage()._metaNodeRegVotePool = newValue}
  }

  var unbondingNodes: [Stratos_Register_V1_UnbondingNode] {
    get {return _storage._unbondingNodes}
    set {_uniqueStorage()._unbondingNodes = newValue}
  }

  var kickMetaNodeVotePool: [Stratos_Register_V1_KickMetaNodeVotePool] {
    get {return _storage._kickMetaNodeVotePool}
    set {_uniqueStorage()._kickMetaNodeVotePool = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stratos_Register_V1_GenesisMetaNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// network address of the meta node
  var networkAddress: String = String()

  /// the consensus public key of the meta node; bech encoded in JSON
  var pubkey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _pubkey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_pubkey = newValue}
  }
  /// Returns true if `pubkey` has been explicitly set.
  var hasPubkey: Bool {return self._pubkey != nil}
  /// Clears the value of `pubkey`. Subsequent reads from it will return its default value.
  mutating func clearPubkey() {self._pubkey = nil}

  /// has the meta node been suspended from bonded status?
  var suspend: Bool = false

  /// meta node status (Unspecified/Bonded/Unbonding/Unbonded)
  var status: Cosmos_Staking_V1beta1_BondStatus = .unspecified

  /// delegated tokens
  var tokens: Cosmos_Base_V1beta1_Coin {
    get {return _tokens ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokens = newValue}
  }
  /// Returns true if `tokens` has been explicitly set.
  var hasTokens: Bool {return self._tokens != nil}
  /// Clears the value of `tokens`. Subsequent reads from it will return its default value.
  mutating func clearTokens() {self._tokens = nil}

  /// owner address of the meta node
  var ownerAddress: String = String()

  /// reward beneficiary address of the meta node
  var beneficiaryAddress: String = String()

  /// description terms for the meta node
  var description_p: Stratos_Register_V1_Description {
    get {return _description_p ?? Stratos_Register_V1_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pubkey: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _tokens: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _description_p: Stratos_Register_V1_Description? = nil
}

struct Stratos_Register_V1_Slashing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var walletAddress: String = String()

  var value: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stratos_Register_V1_GenesisState: @unchecked Sendable {}
extension Stratos_Register_V1_GenesisMetaNode: @unchecked Sendable {}
extension Stratos_Register_V1_Slashing: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stratos.register.v1"

extension Stratos_Register_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "resource_nodes"),
    3: .standard(proto: "meta_nodes"),
    4: .standard(proto: "remaining_noz_limit"),
    5: .same(proto: "slashing"),
    6: .standard(proto: "deposit_noz_rate"),
    7: .standard(proto: "meta_node_reg_vote_pool"),
    8: .standard(proto: "unbonding_nodes"),
    9: .standard(proto: "kick_meta_node_vote_pool"),
  ]

  fileprivate class _StorageClass {
    var _params: Stratos_Register_V1_Params? = nil
    var _resourceNodes: [Stratos_Register_V1_ResourceNode] = []
    var _metaNodes: [Stratos_Register_V1_MetaNode] = []
    var _remainingNozLimit: String = String()
    var _slashing: [Stratos_Register_V1_Slashing] = []
    var _depositNozRate: String = String()
    var _metaNodeRegVotePool: [Stratos_Register_V1_MetaNodeRegistrationVotePool] = []
    var _unbondingNodes: [Stratos_Register_V1_UnbondingNode] = []
    var _kickMetaNodeVotePool: [Stratos_Register_V1_KickMetaNodeVotePool] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _resourceNodes = source._resourceNodes
      _metaNodes = source._metaNodes
      _remainingNozLimit = source._remainingNozLimit
      _slashing = source._slashing
      _depositNozRate = source._depositNozRate
      _metaNodeRegVotePool = source._metaNodeRegVotePool
      _unbondingNodes = source._unbondingNodes
      _kickMetaNodeVotePool = source._kickMetaNodeVotePool
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._resourceNodes) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._metaNodes) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._remainingNozLimit) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._slashing) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._depositNozRate) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._metaNodeRegVotePool) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._unbondingNodes) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._kickMetaNodeVotePool) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._resourceNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._resourceNodes, fieldNumber: 2)
      }
      if !_storage._metaNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._metaNodes, fieldNumber: 3)
      }
      if !_storage._remainingNozLimit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._remainingNozLimit, fieldNumber: 4)
      }
      if !_storage._slashing.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._slashing, fieldNumber: 5)
      }
      if !_storage._depositNozRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._depositNozRate, fieldNumber: 6)
      }
      if !_storage._metaNodeRegVotePool.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._metaNodeRegVotePool, fieldNumber: 7)
      }
      if !_storage._unbondingNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._unbondingNodes, fieldNumber: 8)
      }
      if !_storage._kickMetaNodeVotePool.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._kickMetaNodeVotePool, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V1_GenesisState, rhs: Stratos_Register_V1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._resourceNodes != rhs_storage._resourceNodes {return false}
        if _storage._metaNodes != rhs_storage._metaNodes {return false}
        if _storage._remainingNozLimit != rhs_storage._remainingNozLimit {return false}
        if _storage._slashing != rhs_storage._slashing {return false}
        if _storage._depositNozRate != rhs_storage._depositNozRate {return false}
        if _storage._metaNodeRegVotePool != rhs_storage._metaNodeRegVotePool {return false}
        if _storage._unbondingNodes != rhs_storage._unbondingNodes {return false}
        if _storage._kickMetaNodeVotePool != rhs_storage._kickMetaNodeVotePool {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Register_V1_GenesisMetaNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisMetaNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_address"),
    2: .same(proto: "pubkey"),
    3: .same(proto: "suspend"),
    4: .same(proto: "status"),
    5: .same(proto: "tokens"),
    6: .standard(proto: "owner_address"),
    7: .standard(proto: "beneficiary_address"),
    8: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pubkey) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.suspend) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._tokens) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.beneficiaryAddress) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 1)
    }
    try { if let v = self._pubkey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.suspend != false {
      try visitor.visitSingularBoolField(value: self.suspend, fieldNumber: 3)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try { if let v = self._tokens {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 6)
    }
    if !self.beneficiaryAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.beneficiaryAddress, fieldNumber: 7)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V1_GenesisMetaNode, rhs: Stratos_Register_V1_GenesisMetaNode) -> Bool {
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs._pubkey != rhs._pubkey {return false}
    if lhs.suspend != rhs.suspend {return false}
    if lhs.status != rhs.status {return false}
    if lhs._tokens != rhs._tokens {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.beneficiaryAddress != rhs.beneficiaryAddress {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Register_V1_Slashing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Slashing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wallet_address"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.walletAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.walletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.walletAddress, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Register_V1_Slashing, rhs: Stratos_Register_V1_Slashing) -> Bool {
    if lhs.walletAddress != rhs.walletAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
