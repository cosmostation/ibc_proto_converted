//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/client/v2/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the ibc/client/v2 Msg service.
///
/// Usage: instantiate `Ibc_Core_Client_V2_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Core_Client_V2_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? { get }

  func registerCounterparty(
    _ request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>

  func updateClientConfig(
    _ request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>
}

extension Ibc_Core_Client_V2_MsgClientProtocol {
  internal var serviceName: String {
    return "ibc.core.client.v2.Msg"
  }

  /// RegisterCounterparty defines a rpc handler method for MsgRegisterCounterparty.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterCounterparty.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerCounterparty(
    _ request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.registerCounterparty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterCounterpartyInterceptors() ?? []
    )
  }

  /// UpdateClientConfig defines a rpc handler method for MsgUpdateClientConfig.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateClientConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateClientConfig(
    _ request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.updateClientConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClientConfigInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ibc_Core_Client_V2_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ibc_Core_Client_V2_MsgNIOClient")
internal final class Ibc_Core_Client_V2_MsgClient: Ibc_Core_Client_V2_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.client.v2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ibc_Core_Client_V2_MsgNIOClient: Ibc_Core_Client_V2_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.client.v2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the ibc/client/v2 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Client_V2_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? { get }

  func makeRegisterCounterpartyCall(
    _ request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>

  func makeUpdateClientConfigCall(
    _ request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V2_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterCounterpartyCall(
    _ request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.registerCounterparty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterCounterpartyInterceptors() ?? []
    )
  }

  internal func makeUpdateClientConfigCall(
    _ request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.updateClientConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClientConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_MsgAsyncClientProtocol {
  internal func registerCounterparty(
    _ request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.registerCounterparty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterCounterpartyInterceptors() ?? []
    )
  }

  internal func updateClientConfig(
    _ request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V2_MsgUpdateClientConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V2_MsgClientMetadata.Methods.updateClientConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClientConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ibc_Core_Client_V2_MsgAsyncClient: Ibc_Core_Client_V2_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ibc_Core_Client_V2_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerCounterparty'.
  func makeRegisterCounterpartyInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateClientConfig'.
  func makeUpdateClientConfigInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>]
}

internal enum Ibc_Core_Client_V2_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.client.v2.Msg",
    methods: [
      Ibc_Core_Client_V2_MsgClientMetadata.Methods.registerCounterparty,
      Ibc_Core_Client_V2_MsgClientMetadata.Methods.updateClientConfig,
    ]
  )

  internal enum Methods {
    internal static let registerCounterparty = GRPCMethodDescriptor(
      name: "RegisterCounterparty",
      path: "/ibc.core.client.v2.Msg/RegisterCounterparty",
      type: GRPCCallType.unary
    )

    internal static let updateClientConfig = GRPCMethodDescriptor(
      name: "UpdateClientConfig",
      path: "/ibc.core.client.v2.Msg/UpdateClientConfig",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the ibc/client/v2 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Core_Client_V2_MsgProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Client_V2_MsgServerInterceptorFactoryProtocol? { get }

  /// RegisterCounterparty defines a rpc handler method for MsgRegisterCounterparty.
  func registerCounterparty(request: Ibc_Core_Client_V2_MsgRegisterCounterparty, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>

  /// UpdateClientConfig defines a rpc handler method for MsgUpdateClientConfig.
  func updateClientConfig(request: Ibc_Core_Client_V2_MsgUpdateClientConfig, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>
}

extension Ibc_Core_Client_V2_MsgProvider {
  internal var serviceName: Substring {
    return Ibc_Core_Client_V2_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterCounterparty":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_MsgRegisterCounterparty>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>(),
        interceptors: self.interceptors?.makeRegisterCounterpartyInterceptors() ?? [],
        userFunction: self.registerCounterparty(request:context:)
      )

    case "UpdateClientConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_MsgUpdateClientConfig>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>(),
        interceptors: self.interceptors?.makeUpdateClientConfigInterceptors() ?? [],
        userFunction: self.updateClientConfig(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the ibc/client/v2 Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Core_Client_V2_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V2_MsgServerInterceptorFactoryProtocol? { get }

  /// RegisterCounterparty defines a rpc handler method for MsgRegisterCounterparty.
  @Sendable func registerCounterparty(
    request: Ibc_Core_Client_V2_MsgRegisterCounterparty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse

  /// UpdateClientConfig defines a rpc handler method for MsgUpdateClientConfig.
  @Sendable func updateClientConfig(
    request: Ibc_Core_Client_V2_MsgUpdateClientConfig,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V2_MsgUpdateClientConfigResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V2_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V2_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ibc_Core_Client_V2_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ibc_Core_Client_V2_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterCounterparty":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_MsgRegisterCounterparty>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>(),
        interceptors: self.interceptors?.makeRegisterCounterpartyInterceptors() ?? [],
        wrapping: self.registerCounterparty(request:context:)
      )

    case "UpdateClientConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V2_MsgUpdateClientConfig>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>(),
        interceptors: self.interceptors?.makeUpdateClientConfigInterceptors() ?? [],
        wrapping: self.updateClientConfig(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Core_Client_V2_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerCounterparty'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterCounterpartyInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V2_MsgRegisterCounterparty, Ibc_Core_Client_V2_MsgRegisterCounterpartyResponse>]

  /// - Returns: Interceptors to use when handling 'updateClientConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateClientConfigInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V2_MsgUpdateClientConfig, Ibc_Core_Client_V2_MsgUpdateClientConfigResponse>]
}

internal enum Ibc_Core_Client_V2_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.client.v2.Msg",
    methods: [
      Ibc_Core_Client_V2_MsgServerMetadata.Methods.registerCounterparty,
      Ibc_Core_Client_V2_MsgServerMetadata.Methods.updateClientConfig,
    ]
  )

  internal enum Methods {
    internal static let registerCounterparty = GRPCMethodDescriptor(
      name: "RegisterCounterparty",
      path: "/ibc.core.client.v2.Msg/RegisterCounterparty",
      type: GRPCCallType.unary
    )

    internal static let updateClientConfig = GRPCMethodDescriptor(
      name: "UpdateClientConfig",
      path: "/ibc.core.client.v2.Msg/UpdateClientConfig",
      type: GRPCCallType.unary
    )
  }
}
