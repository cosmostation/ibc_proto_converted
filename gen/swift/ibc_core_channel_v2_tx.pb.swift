// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/channel/v2/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ResponseResultType defines the possible outcomes of the execution of a message
enum Ibc_Core_Channel_V2_ResponseResultType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Default zero value enumeration
  case unspecified // = 0

  /// The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
  case noop // = 1

  /// The message was executed successfully
  case success // = 2

  /// The message was executed unsuccessfully
  case failure // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .noop
    case 2: self = .success
    case 3: self = .failure
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .noop: return 1
    case .success: return 2
    case .failure: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Ibc_Core_Channel_V2_ResponseResultType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Ibc_Core_Channel_V2_ResponseResultType] = [
    .unspecified,
    .noop,
    .success,
    .failure,
  ]
}

#endif  // swift(>=4.2)

/// MsgSendPacket sends an outgoing IBC packet.
struct Ibc_Core_Channel_V2_MsgSendPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceClient: String = String()

  var timeoutTimestamp: UInt64 = 0

  var payloads: [Ibc_Core_Channel_V2_Payload] = []

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSendPacketResponse defines the Msg/SendPacket response type.
struct Ibc_Core_Channel_V2_MsgSendPacketResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequence: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRecvPacket receives an incoming IBC packet.
struct Ibc_Core_Channel_V2_MsgRecvPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V2_Packet {
    get {return _packet ?? Ibc_Core_Channel_V2_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var proofCommitment: Data = Data()

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V2_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgRecvPacketResponse defines the Msg/RecvPacket response type.
struct Ibc_Core_Channel_V2_MsgRecvPacketResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Ibc_Core_Channel_V2_ResponseResultType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTimeout receives timed-out packet
struct Ibc_Core_Channel_V2_MsgTimeout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V2_Packet {
    get {return _packet ?? Ibc_Core_Channel_V2_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var proofUnreceived: Data = Data()

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V2_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgTimeoutResponse defines the Msg/Timeout response type.
struct Ibc_Core_Channel_V2_MsgTimeoutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Ibc_Core_Channel_V2_ResponseResultType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAcknowledgement receives incoming IBC acknowledgement.
struct Ibc_Core_Channel_V2_MsgAcknowledgement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V2_Packet {
    get {return _packet ?? Ibc_Core_Channel_V2_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var acknowledgement: Ibc_Core_Channel_V2_Acknowledgement {
    get {return _acknowledgement ?? Ibc_Core_Channel_V2_Acknowledgement()}
    set {_acknowledgement = newValue}
  }
  /// Returns true if `acknowledgement` has been explicitly set.
  var hasAcknowledgement: Bool {return self._acknowledgement != nil}
  /// Clears the value of `acknowledgement`. Subsequent reads from it will return its default value.
  mutating func clearAcknowledgement() {self._acknowledgement = nil}

  var proofAcked: Data = Data()

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V2_Packet? = nil
  fileprivate var _acknowledgement: Ibc_Core_Channel_V2_Acknowledgement? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
struct Ibc_Core_Channel_V2_MsgAcknowledgementResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Ibc_Core_Channel_V2_ResponseResultType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ibc_Core_Channel_V2_ResponseResultType: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgSendPacket: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgSendPacketResponse: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgRecvPacket: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgRecvPacketResponse: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgTimeout: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgTimeoutResponse: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgAcknowledgement: @unchecked Sendable {}
extension Ibc_Core_Channel_V2_MsgAcknowledgementResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.channel.v2"

extension Ibc_Core_Channel_V2_ResponseResultType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESPONSE_RESULT_TYPE_UNSPECIFIED"),
    1: .same(proto: "RESPONSE_RESULT_TYPE_NOOP"),
    2: .same(proto: "RESPONSE_RESULT_TYPE_SUCCESS"),
    3: .same(proto: "RESPONSE_RESULT_TYPE_FAILURE"),
  ]
}

extension Ibc_Core_Channel_V2_MsgSendPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSendPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_client"),
    2: .standard(proto: "timeout_timestamp"),
    3: .same(proto: "payloads"),
    4: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourceClient) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timeoutTimestamp) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.payloads) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceClient.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceClient, fieldNumber: 1)
    }
    if self.timeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutTimestamp, fieldNumber: 2)
    }
    if !self.payloads.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.payloads, fieldNumber: 3)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgSendPacket, rhs: Ibc_Core_Channel_V2_MsgSendPacket) -> Bool {
    if lhs.sourceClient != rhs.sourceClient {return false}
    if lhs.timeoutTimestamp != rhs.timeoutTimestamp {return false}
    if lhs.payloads != rhs.payloads {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgSendPacketResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSendPacketResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgSendPacketResponse, rhs: Ibc_Core_Channel_V2_MsgSendPacketResponse) -> Bool {
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgRecvPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecvPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .standard(proto: "proof_commitment"),
    3: .standard(proto: "proof_height"),
    4: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._packet) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.proofCommitment) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._proofHeight) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.proofCommitment.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofCommitment, fieldNumber: 2)
    }
    try { if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgRecvPacket, rhs: Ibc_Core_Channel_V2_MsgRecvPacket) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.proofCommitment != rhs.proofCommitment {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgRecvPacketResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecvPacketResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unspecified {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgRecvPacketResponse, rhs: Ibc_Core_Channel_V2_MsgRecvPacketResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgTimeout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeout"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .standard(proto: "proof_unreceived"),
    3: .standard(proto: "proof_height"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._packet) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.proofUnreceived) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._proofHeight) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.proofUnreceived.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofUnreceived, fieldNumber: 2)
    }
    try { if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgTimeout, rhs: Ibc_Core_Channel_V2_MsgTimeout) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.proofUnreceived != rhs.proofUnreceived {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgTimeoutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeoutResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unspecified {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgTimeoutResponse, rhs: Ibc_Core_Channel_V2_MsgTimeoutResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgAcknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAcknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .same(proto: "acknowledgement"),
    3: .standard(proto: "proof_acked"),
    4: .standard(proto: "proof_height"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._packet) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._acknowledgement) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.proofAcked) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._proofHeight) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._acknowledgement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.proofAcked.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofAcked, fieldNumber: 3)
    }
    try { if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgAcknowledgement, rhs: Ibc_Core_Channel_V2_MsgAcknowledgement) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs._acknowledgement != rhs._acknowledgement {return false}
    if lhs.proofAcked != rhs.proofAcked {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V2_MsgAcknowledgementResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAcknowledgementResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unspecified {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V2_MsgAcknowledgementResponse, rhs: Ibc_Core_Channel_V2_MsgAcknowledgementResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
