// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: atomone/gov/v1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Since: cosmos-sdk 0.46

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VoteOption enumerates the valid vote options for a given governance proposal.
enum Atomone_Gov_V1_VoteOption: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  case unspecified // = 0

  /// VOTE_OPTION_YES defines a yes vote option.
  case yes // = 1

  /// VOTE_OPTION_ABSTAIN defines an abstain vote option.
  case abstain // = 2

  /// VOTE_OPTION_NO defines a no vote option.
  case no // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .yes
    case 2: self = .abstain
    case 3: self = .no
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .yes: return 1
    case .abstain: return 2
    case .no: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Atomone_Gov_V1_VoteOption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Atomone_Gov_V1_VoteOption] = [
    .unspecified,
    .yes,
    .abstain,
    .no,
  ]
}

#endif  // swift(>=4.2)

/// ProposalStatus enumerates the valid statuses of a proposal.
enum Atomone_Gov_V1_ProposalStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
  case unspecified // = 0

  /// PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
  /// period.
  case depositPeriod // = 1

  /// PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
  /// period.
  case votingPeriod // = 2

  /// PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
  /// passed.
  case passed // = 3

  /// PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
  /// been rejected.
  case rejected // = 4

  /// PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
  /// failed.
  case failed // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .depositPeriod
    case 2: self = .votingPeriod
    case 3: self = .passed
    case 4: self = .rejected
    case 5: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .depositPeriod: return 1
    case .votingPeriod: return 2
    case .passed: return 3
    case .rejected: return 4
    case .failed: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Atomone_Gov_V1_ProposalStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Atomone_Gov_V1_ProposalStatus] = [
    .unspecified,
    .depositPeriod,
    .votingPeriod,
    .passed,
    .rejected,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// WeightedVoteOption defines a unit of vote for vote split.
struct Atomone_Gov_V1_WeightedVoteOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// option defines the valid vote options, it must not contain duplicate vote
  /// options.
  var option: Atomone_Gov_V1_VoteOption = .unspecified

  /// weight is the vote weight associated with the vote option.
  var weight: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deposit defines an amount deposited by an account address to an active
/// proposal.
struct Atomone_Gov_V1_Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// proposal_id defines the unique id of the proposal.
  var proposalID: UInt64 = 0

  /// depositor defines the deposit addresses from the proposals.
  var depositor: String = String()

  /// amount to be deposited by depositor.
  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// LastMinDeposit is a record of the last time the minimum deposit
/// was updated in the store, both its value and a timestamp
struct Atomone_Gov_V1_LastMinDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// value is the value of the minimum deposit
  var value: [Cosmos_Base_V1beta1_Coin] = []

  /// time is the time the minimum deposit was last updated
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Proposal defines the core field members of a governance proposal.
struct Atomone_Gov_V1_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id defines the unique id of the proposal.
  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// messages are the arbitrary messages to be executed if the proposal passes.
  var messages: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  /// status defines the proposal status.
  var status: Atomone_Gov_V1_ProposalStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// final_tally_result is the final tally result of the proposal. When
  /// querying a proposal via gRPC, this field is not populated until the
  /// proposal's voting period has ended.
  var finalTallyResult: Atomone_Gov_V1_TallyResult {
    get {return _storage._finalTallyResult ?? Atomone_Gov_V1_TallyResult()}
    set {_uniqueStorage()._finalTallyResult = newValue}
  }
  /// Returns true if `finalTallyResult` has been explicitly set.
  var hasFinalTallyResult: Bool {return _storage._finalTallyResult != nil}
  /// Clears the value of `finalTallyResult`. Subsequent reads from it will return its default value.
  mutating func clearFinalTallyResult() {_uniqueStorage()._finalTallyResult = nil}

  /// submit_time is the time of proposal submission.
  var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  var hasSubmitTime: Bool {return _storage._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  mutating func clearSubmitTime() {_uniqueStorage()._submitTime = nil}

  /// deposit_end_time is the end time for deposition.
  var depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._depositEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._depositEndTime = newValue}
  }
  /// Returns true if `depositEndTime` has been explicitly set.
  var hasDepositEndTime: Bool {return _storage._depositEndTime != nil}
  /// Clears the value of `depositEndTime`. Subsequent reads from it will return its default value.
  mutating func clearDepositEndTime() {_uniqueStorage()._depositEndTime = nil}

  /// total_deposit is the total deposit on the proposal.
  var totalDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._totalDeposit}
    set {_uniqueStorage()._totalDeposit = newValue}
  }

  /// voting_start_time is the starting time to vote on a proposal.
  var votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingStartTime = newValue}
  }
  /// Returns true if `votingStartTime` has been explicitly set.
  var hasVotingStartTime: Bool {return _storage._votingStartTime != nil}
  /// Clears the value of `votingStartTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingStartTime() {_uniqueStorage()._votingStartTime = nil}

  /// voting_end_time is the end time of voting on a proposal.
  var votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingEndTime = newValue}
  }
  /// Returns true if `votingEndTime` has been explicitly set.
  var hasVotingEndTime: Bool {return _storage._votingEndTime != nil}
  /// Clears the value of `votingEndTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingEndTime() {_uniqueStorage()._votingEndTime = nil}

  /// metadata is any arbitrary metadata attached to the proposal.
  var metadata: String {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  /// title is the title of the proposal
  ///
  /// Since: cosmos-sdk 0.47
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// summary is a short summary of the proposal
  ///
  /// Since: cosmos-sdk 0.47
  var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  /// Proposer is the address of the proposal sumbitter
  ///
  /// Since: cosmos-sdk 0.47
  var proposer: String {
    get {return _storage._proposer}
    set {_uniqueStorage()._proposer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TallyResult defines a standard tally for a governance proposal.
struct Atomone_Gov_V1_TallyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// yes_count is the number of yes votes on a proposal.
  var yesCount: String = String()

  /// abstain_count is the number of abstain votes on a proposal.
  var abstainCount: String = String()

  /// no_count is the number of no votes on a proposal.
  var noCount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Vote defines a vote on a governance proposal.
/// A Vote consists of a proposal ID, the voter, and the vote option.
struct Atomone_Gov_V1_Vote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// proposal_id defines the unique id of the proposal.
  var proposalID: UInt64 = 0

  /// voter is the voter address of the proposal.
  var voter: String = String()

  /// options is the weighted vote options.
  var options: [Atomone_Gov_V1_WeightedVoteOption] = []

  /// metadata is any  arbitrary metadata to attached to the vote.
  var metadata: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QuorumCheckQueueEntry defines a quorum check queue entry.
struct Atomone_Gov_V1_QuorumCheckQueueEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// quorum_timeout_time is the time after which quorum checks start happening
  /// and voting period is extended if proposal reaches quorum.
  var quorumTimeoutTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _quorumTimeoutTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_quorumTimeoutTime = newValue}
  }
  /// Returns true if `quorumTimeoutTime` has been explicitly set.
  var hasQuorumTimeoutTime: Bool {return self._quorumTimeoutTime != nil}
  /// Clears the value of `quorumTimeoutTime`. Subsequent reads from it will return its default value.
  mutating func clearQuorumTimeoutTime() {self._quorumTimeoutTime = nil}

  /// quorum_check_count is the number of times quorum will be checked.
  /// This is a snapshot of the parameter value with the same name when the
  /// proposal is initially added to the queue.
  var quorumCheckCount: UInt64 = 0

  /// quorum_checks_done is the number of quorum checks that have been done.
  var quorumChecksDone: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _quorumTimeoutTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// DepositParams defines the params for deposits on governance proposals.
struct Atomone_Gov_V1_DepositParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Minimum deposit for a proposal to enter voting period.
  var minDeposit: [Cosmos_Base_V1beta1_Coin] = []

  /// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  /// months.
  var maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxDepositPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxDepositPeriod = newValue}
  }
  /// Returns true if `maxDepositPeriod` has been explicitly set.
  var hasMaxDepositPeriod: Bool {return self._maxDepositPeriod != nil}
  /// Clears the value of `maxDepositPeriod`. Subsequent reads from it will return its default value.
  mutating func clearMaxDepositPeriod() {self._maxDepositPeriod = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// VotingParams defines the params for voting on governance proposals.
struct Atomone_Gov_V1_VotingParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Duration of the voting period.
  var votingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _votingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_votingPeriod = newValue}
  }
  /// Returns true if `votingPeriod` has been explicitly set.
  var hasVotingPeriod: Bool {return self._votingPeriod != nil}
  /// Clears the value of `votingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearVotingPeriod() {self._votingPeriod = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _votingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// TallyParams defines the params for tallying votes on governance proposals.
struct Atomone_Gov_V1_TallyParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Minimum percentage of total stake needed to vote for a result to be
  /// considered valid.
  var quorum: String = String()

  /// Minimum proportion of Yes votes for proposal to pass. Default value: 2/3.
  var threshold: String = String()

  /// quorum for constitution amendment proposals
  var constitutionAmendmentQuorum: String = String()

  /// Minimum proportion of Yes votes for a Constitution Amendment proposal to pass. Default value: 0.9.
  var constitutionAmendmentThreshold: String = String()

  /// quorum for law proposals
  var lawQuorum: String = String()

  /// Minimum proportion of Yes votes for a Law proposal to pass. Default value: 0.9.
  var lawThreshold: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Atomone_Gov_V1_MinDepositThrottler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Floor value for the minimum deposit required for a proposal to enter the voting period.
  var floorValue: [Cosmos_Base_V1beta1_Coin] = []

  /// Duration that dictates after how long the dynamic minimum deposit should be recalculated
  /// for time-based decreases.
  var updatePeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _updatePeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_updatePeriod = newValue}
  }
  /// Returns true if `updatePeriod` has been explicitly set.
  var hasUpdatePeriod: Bool {return self._updatePeriod != nil}
  /// Clears the value of `updatePeriod`. Subsequent reads from it will return its default value.
  mutating func clearUpdatePeriod() {self._updatePeriod = nil}

  /// The number of active proposals the dynamic minimum deposit should target.
  var targetActiveProposals: UInt64 = 0

  /// The ratio of increase for the minimum deposit when the number of active proposals
  /// is at or above the target.
  var increaseRatio: String = String()

  /// The ratio of decrease for the minimum deposit when the number of active proposals
  /// is 1 less than the target.
  var decreaseRatio: String = String()

  /// A positive integer representing the sensitivity of dynamic minimum deposit 
  /// decreases to the distance from the target number of active proposals.
  /// The higher the number, the lower the sensitivity. A value of 1 represents the
  /// highest sensitivity.
  var decreaseSensitivityTargetDistance: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatePeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct Atomone_Gov_V1_MinInitialDepositThrottler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Floor value for the minimum initial deposit required for a proposal to enter the deposit period.
  var floorValue: [Cosmos_Base_V1beta1_Coin] = []

  /// Duration that dictates after how long the dynamic minimum deposit should be recalculated
  /// for time-based decreases.
  var updatePeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _updatePeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_updatePeriod = newValue}
  }
  /// Returns true if `updatePeriod` has been explicitly set.
  var hasUpdatePeriod: Bool {return self._updatePeriod != nil}
  /// Clears the value of `updatePeriod`. Subsequent reads from it will return its default value.
  mutating func clearUpdatePeriod() {self._updatePeriod = nil}

  /// The number of proposals in deposit period the dynamic minimum initial deposit should target.
  var targetProposals: UInt64 = 0

  /// The ratio of increase for the minimum initial deposit when the number of proposals
  /// in deposit period is at or above the target.
  var increaseRatio: String = String()

  /// The ratio of decrease for the minimum initial deposit when the number of proposals
  /// in deposit period is 1 less than the target.
  var decreaseRatio: String = String()

  /// A positive integer representing the sensitivity of dynamic minimum initial 
  /// deposit decreases to the distance from the target number of proposals
  /// in deposit period. The higher the number, the lower the sensitivity. A value 
  /// of 1 represents the highest sensitivity.
  var decreaseSensitivityTargetDistance: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatePeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// Params defines the parameters for the x/gov module.
///
/// Since: cosmos-sdk 0.47
struct Atomone_Gov_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Minimum deposit for a proposal to enter voting period.
  /// Deprecated: a dynamic system now determines the minimum deposit,
  /// see the other params inside the min_deposit_throttler field.
  /// While setting this value returns an error, when queried it is set to the
  /// value of the current minimum deposit value as determined by the dynamic
  /// system for backward compatibility.
  var minDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._minDeposit}
    set {_uniqueStorage()._minDeposit = newValue}
  }

  /// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  /// months.
  var maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._maxDepositPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._maxDepositPeriod = newValue}
  }
  /// Returns true if `maxDepositPeriod` has been explicitly set.
  var hasMaxDepositPeriod: Bool {return _storage._maxDepositPeriod != nil}
  /// Clears the value of `maxDepositPeriod`. Subsequent reads from it will return its default value.
  mutating func clearMaxDepositPeriod() {_uniqueStorage()._maxDepositPeriod = nil}

  /// Duration of the voting period.
  var votingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._votingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._votingPeriod = newValue}
  }
  /// Returns true if `votingPeriod` has been explicitly set.
  var hasVotingPeriod: Bool {return _storage._votingPeriod != nil}
  /// Clears the value of `votingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearVotingPeriod() {_uniqueStorage()._votingPeriod = nil}

  ///  Minimum percentage of total stake needed to vote for a result to be
  ///  considered valid. Default value: 0.25.
  var quorum: String {
    get {return _storage._quorum}
    set {_uniqueStorage()._quorum = newValue}
  }

  ///  Minimum proportion of Yes votes for proposal to pass. Default value: 2/3.
  var threshold: String {
    get {return _storage._threshold}
    set {_uniqueStorage()._threshold = newValue}
  }

  ///  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
  var minInitialDepositRatio: String {
    get {return _storage._minInitialDepositRatio}
    set {_uniqueStorage()._minInitialDepositRatio = newValue}
  }

  /// burn deposits if a proposal does not meet quorum
  var burnVoteQuorum: Bool {
    get {return _storage._burnVoteQuorum}
    set {_uniqueStorage()._burnVoteQuorum = newValue}
  }

  /// burn deposits if the proposal does not enter voting period
  var burnProposalDepositPrevote: Bool {
    get {return _storage._burnProposalDepositPrevote}
    set {_uniqueStorage()._burnProposalDepositPrevote = newValue}
  }

  /// The ratio representing the proportion of the deposit value minimum that
  /// must be met when making a deposit. Default value: 0.01. Meaning that for a
  /// chain with a min_deposit of 100stake, a deposit of 1stake would be
  /// required.
  ///
  /// Since: cosmos-sdk 0.50
  /// NOTE: backported from v50 (https://github.com/cosmos/cosmos-sdk/pull/18146)
  var minDepositRatio: String {
    get {return _storage._minDepositRatio}
    set {_uniqueStorage()._minDepositRatio = newValue}
  }

  /// quorum for constitution amendment proposals
  var constitutionAmendmentQuorum: String {
    get {return _storage._constitutionAmendmentQuorum}
    set {_uniqueStorage()._constitutionAmendmentQuorum = newValue}
  }

  /// Minimum proportion of Yes votes for a Constitution Amendment proposal to pass. Default value: 0.9.
  var constitutionAmendmentThreshold: String {
    get {return _storage._constitutionAmendmentThreshold}
    set {_uniqueStorage()._constitutionAmendmentThreshold = newValue}
  }

  /// quorum for law proposals
  var lawQuorum: String {
    get {return _storage._lawQuorum}
    set {_uniqueStorage()._lawQuorum = newValue}
  }

  /// Minimum proportion of Yes votes for a Law proposal to pass. Default value: 0.9.
  var lawThreshold: String {
    get {return _storage._lawThreshold}
    set {_uniqueStorage()._lawThreshold = newValue}
  }

  /// Duration of time after a proposal enters the voting period, during which quorum
  /// must be achieved to not incur in a voting period extension.
  var quorumTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._quorumTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._quorumTimeout = newValue}
  }
  /// Returns true if `quorumTimeout` has been explicitly set.
  var hasQuorumTimeout: Bool {return _storage._quorumTimeout != nil}
  /// Clears the value of `quorumTimeout`. Subsequent reads from it will return its default value.
  mutating func clearQuorumTimeout() {_uniqueStorage()._quorumTimeout = nil}

  /// Duration that expresses the maximum amount of time by which a proposal voting period
  /// can be extended.
  var maxVotingPeriodExtension: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._maxVotingPeriodExtension ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._maxVotingPeriodExtension = newValue}
  }
  /// Returns true if `maxVotingPeriodExtension` has been explicitly set.
  var hasMaxVotingPeriodExtension: Bool {return _storage._maxVotingPeriodExtension != nil}
  /// Clears the value of `maxVotingPeriodExtension`. Subsequent reads from it will return its default value.
  mutating func clearMaxVotingPeriodExtension() {_uniqueStorage()._maxVotingPeriodExtension = nil}

  /// Number of times a proposal should be checked for quorum after the quorum timeout
  /// has elapsed. Used to compute the amount of time in between quorum checks.
  var quorumCheckCount: UInt64 {
    get {return _storage._quorumCheckCount}
    set {_uniqueStorage()._quorumCheckCount = newValue}
  }

  var minDepositThrottler: Atomone_Gov_V1_MinDepositThrottler {
    get {return _storage._minDepositThrottler ?? Atomone_Gov_V1_MinDepositThrottler()}
    set {_uniqueStorage()._minDepositThrottler = newValue}
  }
  /// Returns true if `minDepositThrottler` has been explicitly set.
  var hasMinDepositThrottler: Bool {return _storage._minDepositThrottler != nil}
  /// Clears the value of `minDepositThrottler`. Subsequent reads from it will return its default value.
  mutating func clearMinDepositThrottler() {_uniqueStorage()._minDepositThrottler = nil}

  var minInitialDepositThrottler: Atomone_Gov_V1_MinInitialDepositThrottler {
    get {return _storage._minInitialDepositThrottler ?? Atomone_Gov_V1_MinInitialDepositThrottler()}
    set {_uniqueStorage()._minInitialDepositThrottler = newValue}
  }
  /// Returns true if `minInitialDepositThrottler` has been explicitly set.
  var hasMinInitialDepositThrottler: Bool {return _storage._minInitialDepositThrottler != nil}
  /// Clears the value of `minInitialDepositThrottler`. Subsequent reads from it will return its default value.
  mutating func clearMinInitialDepositThrottler() {_uniqueStorage()._minInitialDepositThrottler = nil}

  /// Minimum proportion of No Votes for a proposal deposit to be burnt.
  var burnDepositNoThreshold: String {
    get {return _storage._burnDepositNoThreshold}
    set {_uniqueStorage()._burnDepositNoThreshold = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Atomone_Gov_V1_VoteOption: @unchecked Sendable {}
extension Atomone_Gov_V1_ProposalStatus: @unchecked Sendable {}
extension Atomone_Gov_V1_WeightedVoteOption: @unchecked Sendable {}
extension Atomone_Gov_V1_Deposit: @unchecked Sendable {}
extension Atomone_Gov_V1_LastMinDeposit: @unchecked Sendable {}
extension Atomone_Gov_V1_Proposal: @unchecked Sendable {}
extension Atomone_Gov_V1_TallyResult: @unchecked Sendable {}
extension Atomone_Gov_V1_Vote: @unchecked Sendable {}
extension Atomone_Gov_V1_QuorumCheckQueueEntry: @unchecked Sendable {}
extension Atomone_Gov_V1_DepositParams: @unchecked Sendable {}
extension Atomone_Gov_V1_VotingParams: @unchecked Sendable {}
extension Atomone_Gov_V1_TallyParams: @unchecked Sendable {}
extension Atomone_Gov_V1_MinDepositThrottler: @unchecked Sendable {}
extension Atomone_Gov_V1_MinInitialDepositThrottler: @unchecked Sendable {}
extension Atomone_Gov_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "atomone.gov.v1"

extension Atomone_Gov_V1_VoteOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOTE_OPTION_UNSPECIFIED"),
    1: .same(proto: "VOTE_OPTION_YES"),
    2: .same(proto: "VOTE_OPTION_ABSTAIN"),
    3: .same(proto: "VOTE_OPTION_NO"),
  ]
}

extension Atomone_Gov_V1_ProposalStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_STATUS_UNSPECIFIED"),
    1: .same(proto: "PROPOSAL_STATUS_DEPOSIT_PERIOD"),
    2: .same(proto: "PROPOSAL_STATUS_VOTING_PERIOD"),
    3: .same(proto: "PROPOSAL_STATUS_PASSED"),
    4: .same(proto: "PROPOSAL_STATUS_REJECTED"),
    5: .same(proto: "PROPOSAL_STATUS_FAILED"),
  ]
}

extension Atomone_Gov_V1_WeightedVoteOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightedVoteOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option"),
    2: .same(proto: "weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.option) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.weight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.option != .unspecified {
      try visitor.visitSingularEnumField(value: self.option, fieldNumber: 1)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularStringField(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_WeightedVoteOption, rhs: Atomone_Gov_V1_WeightedVoteOption) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proposal_id"),
    2: .same(proto: "depositor"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.proposalID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 1)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_Deposit, rhs: Atomone_Gov_V1_Deposit) -> Bool {
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_LastMinDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LastMinDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_LastMinDeposit, rhs: Atomone_Gov_V1_LastMinDeposit) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "messages"),
    3: .same(proto: "status"),
    4: .standard(proto: "final_tally_result"),
    5: .standard(proto: "submit_time"),
    6: .standard(proto: "deposit_end_time"),
    7: .standard(proto: "total_deposit"),
    8: .standard(proto: "voting_start_time"),
    9: .standard(proto: "voting_end_time"),
    10: .same(proto: "metadata"),
    11: .same(proto: "title"),
    12: .same(proto: "summary"),
    13: .same(proto: "proposer"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _messages: [SwiftProtobuf.Google_Protobuf_Any] = []
    var _status: Atomone_Gov_V1_ProposalStatus = .unspecified
    var _finalTallyResult: Atomone_Gov_V1_TallyResult? = nil
    var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _totalDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _metadata: String = String()
    var _title: String = String()
    var _summary: String = String()
    var _proposer: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _messages = source._messages
      _status = source._status
      _finalTallyResult = source._finalTallyResult
      _submitTime = source._submitTime
      _depositEndTime = source._depositEndTime
      _totalDeposit = source._totalDeposit
      _votingStartTime = source._votingStartTime
      _votingEndTime = source._votingEndTime
      _metadata = source._metadata
      _title = source._title
      _summary = source._summary
      _proposer = source._proposer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._messages) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._finalTallyResult) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._submitTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._depositEndTime) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._totalDeposit) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._votingStartTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._votingEndTime) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._metadata) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._summary) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._proposer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 2)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      try { if let v = _storage._finalTallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._submitTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._depositEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._totalDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._totalDeposit, fieldNumber: 7)
      }
      try { if let v = _storage._votingStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._votingEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularStringField(value: _storage._metadata, fieldNumber: 10)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 11)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 12)
      }
      if !_storage._proposer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proposer, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_Proposal, rhs: Atomone_Gov_V1_Proposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._finalTallyResult != rhs_storage._finalTallyResult {return false}
        if _storage._submitTime != rhs_storage._submitTime {return false}
        if _storage._depositEndTime != rhs_storage._depositEndTime {return false}
        if _storage._totalDeposit != rhs_storage._totalDeposit {return false}
        if _storage._votingStartTime != rhs_storage._votingStartTime {return false}
        if _storage._votingEndTime != rhs_storage._votingEndTime {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._proposer != rhs_storage._proposer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_TallyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "yes_count"),
    2: .standard(proto: "abstain_count"),
    3: .standard(proto: "no_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.yesCount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.abstainCount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.noCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.yesCount.isEmpty {
      try visitor.visitSingularStringField(value: self.yesCount, fieldNumber: 1)
    }
    if !self.abstainCount.isEmpty {
      try visitor.visitSingularStringField(value: self.abstainCount, fieldNumber: 2)
    }
    if !self.noCount.isEmpty {
      try visitor.visitSingularStringField(value: self.noCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_TallyResult, rhs: Atomone_Gov_V1_TallyResult) -> Bool {
    if lhs.yesCount != rhs.yesCount {return false}
    if lhs.abstainCount != rhs.abstainCount {return false}
    if lhs.noCount != rhs.noCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proposal_id"),
    2: .same(proto: "voter"),
    4: .same(proto: "options"),
    5: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.proposalID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.voter) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 1)
    }
    if !self.voter.isEmpty {
      try visitor.visitSingularStringField(value: self.voter, fieldNumber: 2)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_Vote, rhs: Atomone_Gov_V1_Vote) -> Bool {
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.voter != rhs.voter {return false}
    if lhs.options != rhs.options {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_QuorumCheckQueueEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QuorumCheckQueueEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quorum_timeout_time"),
    2: .standard(proto: "quorum_check_count"),
    3: .standard(proto: "quorum_checks_done"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._quorumTimeoutTime) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.quorumCheckCount) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.quorumChecksDone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._quorumTimeoutTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.quorumCheckCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.quorumCheckCount, fieldNumber: 2)
    }
    if self.quorumChecksDone != 0 {
      try visitor.visitSingularUInt64Field(value: self.quorumChecksDone, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_QuorumCheckQueueEntry, rhs: Atomone_Gov_V1_QuorumCheckQueueEntry) -> Bool {
    if lhs._quorumTimeoutTime != rhs._quorumTimeoutTime {return false}
    if lhs.quorumCheckCount != rhs.quorumCheckCount {return false}
    if lhs.quorumChecksDone != rhs.quorumChecksDone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_DepositParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepositParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_deposit"),
    2: .standard(proto: "max_deposit_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.minDeposit) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxDepositPeriod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.minDeposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minDeposit, fieldNumber: 1)
    }
    try { if let v = self._maxDepositPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_DepositParams, rhs: Atomone_Gov_V1_DepositParams) -> Bool {
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs._maxDepositPeriod != rhs._maxDepositPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_VotingParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VotingParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voting_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._votingPeriod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._votingPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_VotingParams, rhs: Atomone_Gov_V1_VotingParams) -> Bool {
    if lhs._votingPeriod != rhs._votingPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_TallyParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quorum"),
    2: .same(proto: "threshold"),
    3: .standard(proto: "constitution_amendment_quorum"),
    4: .standard(proto: "constitution_amendment_threshold"),
    5: .standard(proto: "law_quorum"),
    6: .standard(proto: "law_threshold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.quorum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.threshold) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.constitutionAmendmentQuorum) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.constitutionAmendmentThreshold) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.lawQuorum) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.lawThreshold) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quorum.isEmpty {
      try visitor.visitSingularStringField(value: self.quorum, fieldNumber: 1)
    }
    if !self.threshold.isEmpty {
      try visitor.visitSingularStringField(value: self.threshold, fieldNumber: 2)
    }
    if !self.constitutionAmendmentQuorum.isEmpty {
      try visitor.visitSingularStringField(value: self.constitutionAmendmentQuorum, fieldNumber: 3)
    }
    if !self.constitutionAmendmentThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.constitutionAmendmentThreshold, fieldNumber: 4)
    }
    if !self.lawQuorum.isEmpty {
      try visitor.visitSingularStringField(value: self.lawQuorum, fieldNumber: 5)
    }
    if !self.lawThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.lawThreshold, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_TallyParams, rhs: Atomone_Gov_V1_TallyParams) -> Bool {
    if lhs.quorum != rhs.quorum {return false}
    if lhs.threshold != rhs.threshold {return false}
    if lhs.constitutionAmendmentQuorum != rhs.constitutionAmendmentQuorum {return false}
    if lhs.constitutionAmendmentThreshold != rhs.constitutionAmendmentThreshold {return false}
    if lhs.lawQuorum != rhs.lawQuorum {return false}
    if lhs.lawThreshold != rhs.lawThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_MinDepositThrottler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MinDepositThrottler"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "floor_value"),
    2: .standard(proto: "update_period"),
    3: .standard(proto: "target_active_proposals"),
    4: .standard(proto: "increase_ratio"),
    5: .standard(proto: "decrease_ratio"),
    6: .standard(proto: "decrease_sensitivity_target_distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.floorValue) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updatePeriod) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.targetActiveProposals) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.increaseRatio) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.decreaseRatio) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.decreaseSensitivityTargetDistance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.floorValue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.floorValue, fieldNumber: 1)
    }
    try { if let v = self._updatePeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.targetActiveProposals != 0 {
      try visitor.visitSingularUInt64Field(value: self.targetActiveProposals, fieldNumber: 3)
    }
    if !self.increaseRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.increaseRatio, fieldNumber: 4)
    }
    if !self.decreaseRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.decreaseRatio, fieldNumber: 5)
    }
    if self.decreaseSensitivityTargetDistance != 0 {
      try visitor.visitSingularUInt64Field(value: self.decreaseSensitivityTargetDistance, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_MinDepositThrottler, rhs: Atomone_Gov_V1_MinDepositThrottler) -> Bool {
    if lhs.floorValue != rhs.floorValue {return false}
    if lhs._updatePeriod != rhs._updatePeriod {return false}
    if lhs.targetActiveProposals != rhs.targetActiveProposals {return false}
    if lhs.increaseRatio != rhs.increaseRatio {return false}
    if lhs.decreaseRatio != rhs.decreaseRatio {return false}
    if lhs.decreaseSensitivityTargetDistance != rhs.decreaseSensitivityTargetDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_MinInitialDepositThrottler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MinInitialDepositThrottler"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "floor_value"),
    2: .standard(proto: "update_period"),
    3: .standard(proto: "target_proposals"),
    4: .standard(proto: "increase_ratio"),
    5: .standard(proto: "decrease_ratio"),
    6: .standard(proto: "decrease_sensitivity_target_distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.floorValue) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updatePeriod) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.targetProposals) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.increaseRatio) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.decreaseRatio) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.decreaseSensitivityTargetDistance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.floorValue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.floorValue, fieldNumber: 1)
    }
    try { if let v = self._updatePeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.targetProposals != 0 {
      try visitor.visitSingularUInt64Field(value: self.targetProposals, fieldNumber: 3)
    }
    if !self.increaseRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.increaseRatio, fieldNumber: 4)
    }
    if !self.decreaseRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.decreaseRatio, fieldNumber: 5)
    }
    if self.decreaseSensitivityTargetDistance != 0 {
      try visitor.visitSingularUInt64Field(value: self.decreaseSensitivityTargetDistance, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_MinInitialDepositThrottler, rhs: Atomone_Gov_V1_MinInitialDepositThrottler) -> Bool {
    if lhs.floorValue != rhs.floorValue {return false}
    if lhs._updatePeriod != rhs._updatePeriod {return false}
    if lhs.targetProposals != rhs.targetProposals {return false}
    if lhs.increaseRatio != rhs.increaseRatio {return false}
    if lhs.decreaseRatio != rhs.decreaseRatio {return false}
    if lhs.decreaseSensitivityTargetDistance != rhs.decreaseSensitivityTargetDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Atomone_Gov_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_deposit"),
    2: .standard(proto: "max_deposit_period"),
    3: .standard(proto: "voting_period"),
    4: .same(proto: "quorum"),
    5: .same(proto: "threshold"),
    7: .standard(proto: "min_initial_deposit_ratio"),
    13: .standard(proto: "burn_vote_quorum"),
    14: .standard(proto: "burn_proposal_deposit_prevote"),
    15: .standard(proto: "min_deposit_ratio"),
    16: .standard(proto: "constitution_amendment_quorum"),
    17: .standard(proto: "constitution_amendment_threshold"),
    18: .standard(proto: "law_quorum"),
    19: .standard(proto: "law_threshold"),
    20: .standard(proto: "quorum_timeout"),
    21: .standard(proto: "max_voting_period_extension"),
    22: .standard(proto: "quorum_check_count"),
    23: .standard(proto: "min_deposit_throttler"),
    24: .standard(proto: "min_initial_deposit_throttler"),
    25: .standard(proto: "burn_deposit_no_threshold"),
  ]

  fileprivate class _StorageClass {
    var _minDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _votingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _quorum: String = String()
    var _threshold: String = String()
    var _minInitialDepositRatio: String = String()
    var _burnVoteQuorum: Bool = false
    var _burnProposalDepositPrevote: Bool = false
    var _minDepositRatio: String = String()
    var _constitutionAmendmentQuorum: String = String()
    var _constitutionAmendmentThreshold: String = String()
    var _lawQuorum: String = String()
    var _lawThreshold: String = String()
    var _quorumTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _maxVotingPeriodExtension: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _quorumCheckCount: UInt64 = 0
    var _minDepositThrottler: Atomone_Gov_V1_MinDepositThrottler? = nil
    var _minInitialDepositThrottler: Atomone_Gov_V1_MinInitialDepositThrottler? = nil
    var _burnDepositNoThreshold: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _minDeposit = source._minDeposit
      _maxDepositPeriod = source._maxDepositPeriod
      _votingPeriod = source._votingPeriod
      _quorum = source._quorum
      _threshold = source._threshold
      _minInitialDepositRatio = source._minInitialDepositRatio
      _burnVoteQuorum = source._burnVoteQuorum
      _burnProposalDepositPrevote = source._burnProposalDepositPrevote
      _minDepositRatio = source._minDepositRatio
      _constitutionAmendmentQuorum = source._constitutionAmendmentQuorum
      _constitutionAmendmentThreshold = source._constitutionAmendmentThreshold
      _lawQuorum = source._lawQuorum
      _lawThreshold = source._lawThreshold
      _quorumTimeout = source._quorumTimeout
      _maxVotingPeriodExtension = source._maxVotingPeriodExtension
      _quorumCheckCount = source._quorumCheckCount
      _minDepositThrottler = source._minDepositThrottler
      _minInitialDepositThrottler = source._minInitialDepositThrottler
      _burnDepositNoThreshold = source._burnDepositNoThreshold
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._minDeposit) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._maxDepositPeriod) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._votingPeriod) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._quorum) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._threshold) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._minInitialDepositRatio) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._burnVoteQuorum) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._burnProposalDepositPrevote) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._minDepositRatio) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._constitutionAmendmentQuorum) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._constitutionAmendmentThreshold) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._lawQuorum) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._lawThreshold) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._quorumTimeout) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._maxVotingPeriodExtension) }()
        case 22: try { try decoder.decodeSingularUInt64Field(value: &_storage._quorumCheckCount) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._minDepositThrottler) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._minInitialDepositThrottler) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._burnDepositNoThreshold) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._minDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._minDeposit, fieldNumber: 1)
      }
      try { if let v = _storage._maxDepositPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._votingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._quorum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._quorum, fieldNumber: 4)
      }
      if !_storage._threshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._threshold, fieldNumber: 5)
      }
      if !_storage._minInitialDepositRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minInitialDepositRatio, fieldNumber: 7)
      }
      if _storage._burnVoteQuorum != false {
        try visitor.visitSingularBoolField(value: _storage._burnVoteQuorum, fieldNumber: 13)
      }
      if _storage._burnProposalDepositPrevote != false {
        try visitor.visitSingularBoolField(value: _storage._burnProposalDepositPrevote, fieldNumber: 14)
      }
      if !_storage._minDepositRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minDepositRatio, fieldNumber: 15)
      }
      if !_storage._constitutionAmendmentQuorum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._constitutionAmendmentQuorum, fieldNumber: 16)
      }
      if !_storage._constitutionAmendmentThreshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._constitutionAmendmentThreshold, fieldNumber: 17)
      }
      if !_storage._lawQuorum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lawQuorum, fieldNumber: 18)
      }
      if !_storage._lawThreshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lawThreshold, fieldNumber: 19)
      }
      try { if let v = _storage._quorumTimeout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._maxVotingPeriodExtension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._quorumCheckCount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._quorumCheckCount, fieldNumber: 22)
      }
      try { if let v = _storage._minDepositThrottler {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._minInitialDepositThrottler {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if !_storage._burnDepositNoThreshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._burnDepositNoThreshold, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atomone_Gov_V1_Params, rhs: Atomone_Gov_V1_Params) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._minDeposit != rhs_storage._minDeposit {return false}
        if _storage._maxDepositPeriod != rhs_storage._maxDepositPeriod {return false}
        if _storage._votingPeriod != rhs_storage._votingPeriod {return false}
        if _storage._quorum != rhs_storage._quorum {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        if _storage._minInitialDepositRatio != rhs_storage._minInitialDepositRatio {return false}
        if _storage._burnVoteQuorum != rhs_storage._burnVoteQuorum {return false}
        if _storage._burnProposalDepositPrevote != rhs_storage._burnProposalDepositPrevote {return false}
        if _storage._minDepositRatio != rhs_storage._minDepositRatio {return false}
        if _storage._constitutionAmendmentQuorum != rhs_storage._constitutionAmendmentQuorum {return false}
        if _storage._constitutionAmendmentThreshold != rhs_storage._constitutionAmendmentThreshold {return false}
        if _storage._lawQuorum != rhs_storage._lawQuorum {return false}
        if _storage._lawThreshold != rhs_storage._lawThreshold {return false}
        if _storage._quorumTimeout != rhs_storage._quorumTimeout {return false}
        if _storage._maxVotingPeriodExtension != rhs_storage._maxVotingPeriodExtension {return false}
        if _storage._quorumCheckCount != rhs_storage._quorumCheckCount {return false}
        if _storage._minDepositThrottler != rhs_storage._minDepositThrottler {return false}
        if _storage._minInitialDepositThrottler != rhs_storage._minInitialDepositThrottler {return false}
        if _storage._burnDepositNoThreshold != rhs_storage._burnDepositNoThreshold {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
