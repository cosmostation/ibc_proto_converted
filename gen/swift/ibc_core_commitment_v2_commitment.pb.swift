// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/commitment/v2/commitment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MerklePath is the path used to verify commitment proofs, which can be an
/// arbitrary structured object (defined by a commitment type).
/// ICS-23 verification supports membership proofs for nested merkle trees.
/// The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
/// The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
/// stored in the consensus state of the client.
/// Each element of the path represents the key of a merkle tree from the root to the leaf.
/// The elements of the path before the final element must be the path to the tree that contains
/// the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
/// The final element of the path is the key of the leaf in the ICS24 provable store,
/// Thus IBC core will append the ICS24 path to the final element of the MerklePath
/// stored in the counterparty to create the full path to the leaf for proof verification.
/// Examples:
/// Cosmos SDK:
/// The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
/// are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
/// MerklePrefix has the following structure: ["ibc", ""]
/// The core IBC handler will append the ICS24 path to the final element of the MerklePath
/// like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
/// Ethereum:
/// The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
/// by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
/// Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
/// Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
/// MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
/// The core IBC handler will append the ICS24 path to the final element of the MerklePath
/// like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
/// verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
/// consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
/// provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
/// by the client against the root hash in the client's consensus state.
struct Ibc_Core_Commitment_V2_MerklePath {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyPath: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ibc_Core_Commitment_V2_MerklePath: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.commitment.v2"

extension Ibc_Core_Commitment_V2_MerklePath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MerklePath"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.keyPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPath.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.keyPath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Commitment_V2_MerklePath, rhs: Ibc_Core_Commitment_V2_MerklePath) -> Bool {
    if lhs.keyPath != rhs.keyPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
