// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stratos/evm/v1/evm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the EVM module parameters
struct Stratos_Evm_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// evm denom represents the token denomination used to run the EVM state
  /// transitions.
  var evmDenom: String = String()

  /// enable create toggles state transitions that use the vm.Create function
  var enableCreate: Bool = false

  /// enable call toggles state transitions that use the vm.Call function
  var enableCall: Bool = false

  /// extra eips defines the additional EIPs for the vm.Config
  var extraEips: [Int64] = []

  /// chain config defines the EVM chain configuration parameters
  var chainConfig: Stratos_Evm_V1_ChainConfig {
    get {return _chainConfig ?? Stratos_Evm_V1_ChainConfig()}
    set {_chainConfig = newValue}
  }
  /// Returns true if `chainConfig` has been explicitly set.
  var hasChainConfig: Bool {return self._chainConfig != nil}
  /// Clears the value of `chainConfig`. Subsequent reads from it will return its default value.
  mutating func clearChainConfig() {self._chainConfig = nil}

  var feeMarketParams: Stratos_Evm_V1_FeeMarketParams {
    get {return _feeMarketParams ?? Stratos_Evm_V1_FeeMarketParams()}
    set {_feeMarketParams = newValue}
  }
  /// Returns true if `feeMarketParams` has been explicitly set.
  var hasFeeMarketParams: Bool {return self._feeMarketParams != nil}
  /// Clears the value of `feeMarketParams`. Subsequent reads from it will return its default value.
  mutating func clearFeeMarketParams() {self._feeMarketParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chainConfig: Stratos_Evm_V1_ChainConfig? = nil
  fileprivate var _feeMarketParams: Stratos_Evm_V1_FeeMarketParams? = nil
}

/// ChainConfig defines the Ethereum ChainConfig parameters using *sdkmath.Int values
/// instead of *big.Int.
struct Stratos_Evm_V1_ChainConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// chainId identifies the current chain and is used for replay protection
  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  /// Homestead switch block (nil no fork, 0 = already homestead)
  var homesteadBlock: String {
    get {return _storage._homesteadBlock}
    set {_uniqueStorage()._homesteadBlock = newValue}
  }

  /// TheDAO hard-fork switch block (nil no fork)
  var daoForkBlock: String {
    get {return _storage._daoForkBlock}
    set {_uniqueStorage()._daoForkBlock = newValue}
  }

  /// Whether the nodes supports or opposes the DAO hard-fork
  var daoForkSupport: Bool {
    get {return _storage._daoForkSupport}
    set {_uniqueStorage()._daoForkSupport = newValue}
  }

  /// EIP150 implements the Gas price changes
  /// (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
  var eip150Block: String {
    get {return _storage._eip150Block}
    set {_uniqueStorage()._eip150Block = newValue}
  }

  /// EIP150 HF hash (needed for header only clients as only gas pricing changed)
  var eip150Hash: String {
    get {return _storage._eip150Hash}
    set {_uniqueStorage()._eip150Hash = newValue}
  }

  /// EIP155Block HF block
  var eip155Block: String {
    get {return _storage._eip155Block}
    set {_uniqueStorage()._eip155Block = newValue}
  }

  /// EIP158 HF block
  var eip158Block: String {
    get {return _storage._eip158Block}
    set {_uniqueStorage()._eip158Block = newValue}
  }

  /// Byzantium switch block (nil no fork, 0 = already on byzantium)
  var byzantiumBlock: String {
    get {return _storage._byzantiumBlock}
    set {_uniqueStorage()._byzantiumBlock = newValue}
  }

  /// Constantinople switch block (nil no fork, 0 = already activated)
  var constantinopleBlock: String {
    get {return _storage._constantinopleBlock}
    set {_uniqueStorage()._constantinopleBlock = newValue}
  }

  /// Petersburg switch block (nil same as Constantinople)
  var petersburgBlock: String {
    get {return _storage._petersburgBlock}
    set {_uniqueStorage()._petersburgBlock = newValue}
  }

  /// Istanbul switch block (nil no fork, 0 = already on istanbul)
  var istanbulBlock: String {
    get {return _storage._istanbulBlock}
    set {_uniqueStorage()._istanbulBlock = newValue}
  }

  /// Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated)
  var muirGlacierBlock: String {
    get {return _storage._muirGlacierBlock}
    set {_uniqueStorage()._muirGlacierBlock = newValue}
  }

  /// Berlin switch block (nil = no fork, 0 = already on berlin)
  var berlinBlock: String {
    get {return _storage._berlinBlock}
    set {_uniqueStorage()._berlinBlock = newValue}
  }

  /// London switch block (nil = no fork, 0 = already on london)
  var londonBlock: String {
    get {return _storage._londonBlock}
    set {_uniqueStorage()._londonBlock = newValue}
  }

  /// Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated)
  var arrowGlacierBlock: String {
    get {return _storage._arrowGlacierBlock}
    set {_uniqueStorage()._arrowGlacierBlock = newValue}
  }

  /// EIP-3675 (TheMerge) switch block (nil = no fork, 0 = already in merge proceedings)
  var mergeForkBlock: String {
    get {return _storage._mergeForkBlock}
    set {_uniqueStorage()._mergeForkBlock = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// State represents a single Storage key value pair item.
struct Stratos_Evm_V1_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TransactionLogs define the logs generated from a transaction execution
/// with a given hash. It it used for import/export data as transactions are not
/// persisted on blockchain state after an upgrade.
struct Stratos_Evm_V1_TransactionLogs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: String = String()

  var logs: [Stratos_Evm_V1_Log] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Log represents an protobuf compatible Ethereum Log that defines a contract
/// log event. These events are generated by the LOG opcode and stored/indexed by
/// the node.
struct Stratos_Evm_V1_Log {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the contract that generated the event
  var address: String = String()

  /// list of topics provided by the contract.
  var topics: [String] = []

  /// supplied by the contract, usually ABI-encoded
  var data: Data = Data()

  /// block in which the transaction was included
  var blockNumber: UInt64 = 0

  /// hash of the transaction
  var txHash: String = String()

  /// index of the transaction in the block
  var txIndex: UInt64 = 0

  /// hash of the block in which the transaction was included
  var blockHash: String = String()

  /// index of the log in the block
  var index: UInt64 = 0

  /// The Removed field is true if this log was reverted due to a chain
  /// reorganisation. You must pay attention to this field if you receive logs
  /// through a filter query.
  var removed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TxResult stores results of Tx execution.
struct Stratos_Evm_V1_TxResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// contract_address contains the ethereum address of the created contract (if
  /// any). If the state transition is an evm.Call, the contract address will be
  /// empty.
  var contractAddress: String = String()

  /// bloom represents the bloom filter bytes
  var bloom: Data = Data()

  /// tx_logs contains the transaction hash and the proto-compatible ethereum
  /// logs.
  var txLogs: Stratos_Evm_V1_TransactionLogs {
    get {return _txLogs ?? Stratos_Evm_V1_TransactionLogs()}
    set {_txLogs = newValue}
  }
  /// Returns true if `txLogs` has been explicitly set.
  var hasTxLogs: Bool {return self._txLogs != nil}
  /// Clears the value of `txLogs`. Subsequent reads from it will return its default value.
  mutating func clearTxLogs() {self._txLogs = nil}

  /// ret defines the bytes from the execution.
  var ret: Data = Data()

  /// reverted flag is set to true when the call has been reverted
  var reverted: Bool = false

  /// gas_used notes the amount of gas consumed while execution
  var gasUsed: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _txLogs: Stratos_Evm_V1_TransactionLogs? = nil
}

/// AccessTuple is the element type of an access list.
struct Stratos_Evm_V1_AccessTuple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hex formatted ethereum address
  var address: String = String()

  /// hex formatted hashes of the storage keys
  var storageKeys: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TraceConfig holds extra parameters to trace functions.
struct Stratos_Evm_V1_TraceConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// custom javascript tracer
  var tracer: String = String()

  /// overrides the default timeout of 5 seconds for JavaScript-based tracing
  /// calls
  var timeout: String = String()

  /// number of blocks the tracer is willing to go back
  var reexec: UInt64 = 0

  /// disable stack capture
  var disableStack: Bool = false

  /// disable storage capture
  var disableStorage: Bool = false

  /// print output during capture end
  var debug: Bool = false

  /// maximum length of output, but zero means unlimited
  var limit: Int32 = 0

  /// Chain overrides, can be used to execute a trace using future fork rules
  var overrides: Stratos_Evm_V1_ChainConfig {
    get {return _overrides ?? Stratos_Evm_V1_ChainConfig()}
    set {_overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return self._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {self._overrides = nil}

  /// enable memory capture
  var enableMemory: Bool = false

  /// enable return data capture
  var enableReturnData: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overrides: Stratos_Evm_V1_ChainConfig? = nil
}

/// Params defines the EVM module parameters
struct Stratos_Evm_V1_FeeMarketParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// no base fee forces the EIP-1559 base fee to 0 (needed for 0 price calls)
  var noBaseFee: Bool = false

  /// base fee change denominator bounds the amount the base fee can change
  /// between blocks.
  var baseFeeChangeDenominator: UInt32 = 0

  /// elasticity multiplier bounds the maximum gas limit an EIP-1559 block may
  /// have.
  var elasticityMultiplier: UInt32 = 0

  /// height at which the base fee calculation is enabled.
  var enableHeight: Int64 = 0

  /// base fee for EIP-1559 blocks.
  var baseFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stratos_Evm_V1_Params: @unchecked Sendable {}
extension Stratos_Evm_V1_ChainConfig: @unchecked Sendable {}
extension Stratos_Evm_V1_State: @unchecked Sendable {}
extension Stratos_Evm_V1_TransactionLogs: @unchecked Sendable {}
extension Stratos_Evm_V1_Log: @unchecked Sendable {}
extension Stratos_Evm_V1_TxResult: @unchecked Sendable {}
extension Stratos_Evm_V1_AccessTuple: @unchecked Sendable {}
extension Stratos_Evm_V1_TraceConfig: @unchecked Sendable {}
extension Stratos_Evm_V1_FeeMarketParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stratos.evm.v1"

extension Stratos_Evm_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "evm_denom"),
    2: .standard(proto: "enable_create"),
    3: .standard(proto: "enable_call"),
    4: .standard(proto: "extra_eips"),
    5: .standard(proto: "chain_config"),
    6: .standard(proto: "fee_market_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.evmDenom) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.enableCreate) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.enableCall) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.extraEips) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._chainConfig) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._feeMarketParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.evmDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.evmDenom, fieldNumber: 1)
    }
    if self.enableCreate != false {
      try visitor.visitSingularBoolField(value: self.enableCreate, fieldNumber: 2)
    }
    if self.enableCall != false {
      try visitor.visitSingularBoolField(value: self.enableCall, fieldNumber: 3)
    }
    if !self.extraEips.isEmpty {
      try visitor.visitPackedInt64Field(value: self.extraEips, fieldNumber: 4)
    }
    try { if let v = self._chainConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._feeMarketParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_Params, rhs: Stratos_Evm_V1_Params) -> Bool {
    if lhs.evmDenom != rhs.evmDenom {return false}
    if lhs.enableCreate != rhs.enableCreate {return false}
    if lhs.enableCall != rhs.enableCall {return false}
    if lhs.extraEips != rhs.extraEips {return false}
    if lhs._chainConfig != rhs._chainConfig {return false}
    if lhs._feeMarketParams != rhs._feeMarketParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_ChainConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChainConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "homestead_block"),
    3: .standard(proto: "dao_fork_block"),
    4: .standard(proto: "dao_fork_support"),
    5: .standard(proto: "eip150_block"),
    6: .standard(proto: "eip150_hash"),
    7: .standard(proto: "eip155_block"),
    8: .standard(proto: "eip158_block"),
    9: .standard(proto: "byzantium_block"),
    10: .standard(proto: "constantinople_block"),
    11: .standard(proto: "petersburg_block"),
    12: .standard(proto: "istanbul_block"),
    13: .standard(proto: "muir_glacier_block"),
    14: .standard(proto: "berlin_block"),
    18: .standard(proto: "london_block"),
    19: .standard(proto: "arrow_glacier_block"),
    20: .standard(proto: "merge_fork_block"),
  ]

  fileprivate class _StorageClass {
    var _chainID: String = String()
    var _homesteadBlock: String = String()
    var _daoForkBlock: String = String()
    var _daoForkSupport: Bool = false
    var _eip150Block: String = String()
    var _eip150Hash: String = String()
    var _eip155Block: String = String()
    var _eip158Block: String = String()
    var _byzantiumBlock: String = String()
    var _constantinopleBlock: String = String()
    var _petersburgBlock: String = String()
    var _istanbulBlock: String = String()
    var _muirGlacierBlock: String = String()
    var _berlinBlock: String = String()
    var _londonBlock: String = String()
    var _arrowGlacierBlock: String = String()
    var _mergeForkBlock: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _homesteadBlock = source._homesteadBlock
      _daoForkBlock = source._daoForkBlock
      _daoForkSupport = source._daoForkSupport
      _eip150Block = source._eip150Block
      _eip150Hash = source._eip150Hash
      _eip155Block = source._eip155Block
      _eip158Block = source._eip158Block
      _byzantiumBlock = source._byzantiumBlock
      _constantinopleBlock = source._constantinopleBlock
      _petersburgBlock = source._petersburgBlock
      _istanbulBlock = source._istanbulBlock
      _muirGlacierBlock = source._muirGlacierBlock
      _berlinBlock = source._berlinBlock
      _londonBlock = source._londonBlock
      _arrowGlacierBlock = source._arrowGlacierBlock
      _mergeForkBlock = source._mergeForkBlock
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._chainID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._homesteadBlock) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._daoForkBlock) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._daoForkSupport) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._eip150Block) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._eip150Hash) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._eip155Block) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._eip158Block) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._byzantiumBlock) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._constantinopleBlock) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._petersburgBlock) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._istanbulBlock) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._muirGlacierBlock) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._berlinBlock) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._londonBlock) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._arrowGlacierBlock) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._mergeForkBlock) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._homesteadBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._homesteadBlock, fieldNumber: 2)
      }
      if !_storage._daoForkBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._daoForkBlock, fieldNumber: 3)
      }
      if _storage._daoForkSupport != false {
        try visitor.visitSingularBoolField(value: _storage._daoForkSupport, fieldNumber: 4)
      }
      if !_storage._eip150Block.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eip150Block, fieldNumber: 5)
      }
      if !_storage._eip150Hash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eip150Hash, fieldNumber: 6)
      }
      if !_storage._eip155Block.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eip155Block, fieldNumber: 7)
      }
      if !_storage._eip158Block.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eip158Block, fieldNumber: 8)
      }
      if !_storage._byzantiumBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._byzantiumBlock, fieldNumber: 9)
      }
      if !_storage._constantinopleBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._constantinopleBlock, fieldNumber: 10)
      }
      if !_storage._petersburgBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._petersburgBlock, fieldNumber: 11)
      }
      if !_storage._istanbulBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._istanbulBlock, fieldNumber: 12)
      }
      if !_storage._muirGlacierBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._muirGlacierBlock, fieldNumber: 13)
      }
      if !_storage._berlinBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._berlinBlock, fieldNumber: 14)
      }
      if !_storage._londonBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._londonBlock, fieldNumber: 18)
      }
      if !_storage._arrowGlacierBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._arrowGlacierBlock, fieldNumber: 19)
      }
      if !_storage._mergeForkBlock.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mergeForkBlock, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_ChainConfig, rhs: Stratos_Evm_V1_ChainConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._homesteadBlock != rhs_storage._homesteadBlock {return false}
        if _storage._daoForkBlock != rhs_storage._daoForkBlock {return false}
        if _storage._daoForkSupport != rhs_storage._daoForkSupport {return false}
        if _storage._eip150Block != rhs_storage._eip150Block {return false}
        if _storage._eip150Hash != rhs_storage._eip150Hash {return false}
        if _storage._eip155Block != rhs_storage._eip155Block {return false}
        if _storage._eip158Block != rhs_storage._eip158Block {return false}
        if _storage._byzantiumBlock != rhs_storage._byzantiumBlock {return false}
        if _storage._constantinopleBlock != rhs_storage._constantinopleBlock {return false}
        if _storage._petersburgBlock != rhs_storage._petersburgBlock {return false}
        if _storage._istanbulBlock != rhs_storage._istanbulBlock {return false}
        if _storage._muirGlacierBlock != rhs_storage._muirGlacierBlock {return false}
        if _storage._berlinBlock != rhs_storage._berlinBlock {return false}
        if _storage._londonBlock != rhs_storage._londonBlock {return false}
        if _storage._arrowGlacierBlock != rhs_storage._arrowGlacierBlock {return false}
        if _storage._mergeForkBlock != rhs_storage._mergeForkBlock {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_State, rhs: Stratos_Evm_V1_State) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_TransactionLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionLogs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "logs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_TransactionLogs, rhs: Stratos_Evm_V1_TransactionLogs) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "topics"),
    3: .same(proto: "data"),
    4: .standard(proto: "block_number"),
    5: .standard(proto: "tx_hash"),
    6: .standard(proto: "tx_index"),
    7: .standard(proto: "block_hash"),
    8: .same(proto: "index"),
    9: .same(proto: "removed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.topics) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.blockNumber) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.txIndex) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.blockHash) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.removed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.topics.isEmpty {
      try visitor.visitRepeatedStringField(value: self.topics, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 4)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 5)
    }
    if self.txIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.txIndex, fieldNumber: 6)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 7)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 8)
    }
    if self.removed != false {
      try visitor.visitSingularBoolField(value: self.removed, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_Log, rhs: Stratos_Evm_V1_Log) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.topics != rhs.topics {return false}
    if lhs.data != rhs.data {return false}
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.txIndex != rhs.txIndex {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.removed != rhs.removed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_TxResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .same(proto: "bloom"),
    3: .standard(proto: "tx_logs"),
    4: .same(proto: "ret"),
    5: .same(proto: "reverted"),
    6: .standard(proto: "gas_used"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.bloom) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._txLogs) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.ret) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.reverted) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.gasUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.bloom.isEmpty {
      try visitor.visitSingularBytesField(value: self.bloom, fieldNumber: 2)
    }
    try { if let v = self._txLogs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.ret.isEmpty {
      try visitor.visitSingularBytesField(value: self.ret, fieldNumber: 4)
    }
    if self.reverted != false {
      try visitor.visitSingularBoolField(value: self.reverted, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_TxResult, rhs: Stratos_Evm_V1_TxResult) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.bloom != rhs.bloom {return false}
    if lhs._txLogs != rhs._txLogs {return false}
    if lhs.ret != rhs.ret {return false}
    if lhs.reverted != rhs.reverted {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_AccessTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessTuple"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "storage_keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.storageKeys) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.storageKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.storageKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_AccessTuple, rhs: Stratos_Evm_V1_AccessTuple) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.storageKeys != rhs.storageKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_TraceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TraceConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tracer"),
    2: .same(proto: "timeout"),
    3: .same(proto: "reexec"),
    5: .standard(proto: "disable_stack"),
    6: .standard(proto: "disable_storage"),
    8: .same(proto: "debug"),
    9: .same(proto: "limit"),
    10: .same(proto: "overrides"),
    11: .standard(proto: "enable_memory"),
    12: .standard(proto: "enable_return_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tracer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.timeout) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.reexec) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disableStack) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.disableStorage) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.debug) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._overrides) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.enableMemory) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.enableReturnData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.tracer.isEmpty {
      try visitor.visitSingularStringField(value: self.tracer, fieldNumber: 1)
    }
    if !self.timeout.isEmpty {
      try visitor.visitSingularStringField(value: self.timeout, fieldNumber: 2)
    }
    if self.reexec != 0 {
      try visitor.visitSingularUInt64Field(value: self.reexec, fieldNumber: 3)
    }
    if self.disableStack != false {
      try visitor.visitSingularBoolField(value: self.disableStack, fieldNumber: 5)
    }
    if self.disableStorage != false {
      try visitor.visitSingularBoolField(value: self.disableStorage, fieldNumber: 6)
    }
    if self.debug != false {
      try visitor.visitSingularBoolField(value: self.debug, fieldNumber: 8)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 9)
    }
    try { if let v = self._overrides {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if self.enableMemory != false {
      try visitor.visitSingularBoolField(value: self.enableMemory, fieldNumber: 11)
    }
    if self.enableReturnData != false {
      try visitor.visitSingularBoolField(value: self.enableReturnData, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_TraceConfig, rhs: Stratos_Evm_V1_TraceConfig) -> Bool {
    if lhs.tracer != rhs.tracer {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.reexec != rhs.reexec {return false}
    if lhs.disableStack != rhs.disableStack {return false}
    if lhs.disableStorage != rhs.disableStorage {return false}
    if lhs.debug != rhs.debug {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs._overrides != rhs._overrides {return false}
    if lhs.enableMemory != rhs.enableMemory {return false}
    if lhs.enableReturnData != rhs.enableReturnData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stratos_Evm_V1_FeeMarketParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeeMarketParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "no_base_fee"),
    2: .standard(proto: "base_fee_change_denominator"),
    3: .standard(proto: "elasticity_multiplier"),
    5: .standard(proto: "enable_height"),
    6: .standard(proto: "base_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.noBaseFee) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.baseFeeChangeDenominator) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.elasticityMultiplier) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.enableHeight) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.baseFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.noBaseFee != false {
      try visitor.visitSingularBoolField(value: self.noBaseFee, fieldNumber: 1)
    }
    if self.baseFeeChangeDenominator != 0 {
      try visitor.visitSingularUInt32Field(value: self.baseFeeChangeDenominator, fieldNumber: 2)
    }
    if self.elasticityMultiplier != 0 {
      try visitor.visitSingularUInt32Field(value: self.elasticityMultiplier, fieldNumber: 3)
    }
    if self.enableHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.enableHeight, fieldNumber: 5)
    }
    if !self.baseFee.isEmpty {
      try visitor.visitSingularStringField(value: self.baseFee, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stratos_Evm_V1_FeeMarketParams, rhs: Stratos_Evm_V1_FeeMarketParams) -> Bool {
    if lhs.noBaseFee != rhs.noBaseFee {return false}
    if lhs.baseFeeChangeDenominator != rhs.baseFeeChangeDenominator {return false}
    if lhs.elasticityMultiplier != rhs.elasticityMultiplier {return false}
    if lhs.enableHeight != rhs.enableHeight {return false}
    if lhs.baseFee != rhs.baseFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
