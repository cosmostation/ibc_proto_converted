// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/commitment/v2/commitment.proto

package com.ibc.core.commitment.v2;

public final class CommitmentProto {
  private CommitmentProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MerklePathOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ibc.core.commitment.v2.MerklePath)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @return A list containing the keyPath.
     */
    java.util.List<com.google.protobuf.ByteString> getKeyPathList();
    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @return The count of keyPath.
     */
    int getKeyPathCount();
    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @param index The index of the element to return.
     * @return The keyPath at the given index.
     */
    com.google.protobuf.ByteString getKeyPath(int index);
  }
  /**
   * <pre>
   * MerklePath is the path used to verify commitment proofs, which can be an
   * arbitrary structured object (defined by a commitment type).
   * ICS-23 verification supports membership proofs for nested merkle trees.
   * The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
   * The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
   * stored in the consensus state of the client.
   * Each element of the path represents the key of a merkle tree from the root to the leaf.
   * The elements of the path before the final element must be the path to the tree that contains
   * the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
   * The final element of the path is the key of the leaf in the ICS24 provable store,
   * Thus IBC core will append the ICS24 path to the final element of the MerklePath
   * stored in the counterparty to create the full path to the leaf for proof verification.
   * Examples:
   * Cosmos SDK:
   * The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
   * are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
   * MerklePrefix has the following structure: ["ibc", ""]
   * The core IBC handler will append the ICS24 path to the final element of the MerklePath
   * like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
   * Ethereum:
   * The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
   * by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
   * Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
   * Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
   * MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
   * The core IBC handler will append the ICS24 path to the final element of the MerklePath
   * like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
   * verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
   * consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
   * provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
   * by the client against the root hash in the client's consensus state.
   * </pre>
   *
   * Protobuf type {@code ibc.core.commitment.v2.MerklePath}
   */
  public static final class MerklePath extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ibc.core.commitment.v2.MerklePath)
      MerklePathOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MerklePath.newBuilder() to construct.
    private MerklePath(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MerklePath() {
      keyPath_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MerklePath();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ibc.core.commitment.v2.CommitmentProto.internal_static_ibc_core_commitment_v2_MerklePath_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ibc.core.commitment.v2.CommitmentProto.internal_static_ibc_core_commitment_v2_MerklePath_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ibc.core.commitment.v2.CommitmentProto.MerklePath.class, com.ibc.core.commitment.v2.CommitmentProto.MerklePath.Builder.class);
    }

    public static final int KEY_PATH_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.google.protobuf.ByteString> keyPath_;
    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @return A list containing the keyPath.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getKeyPathList() {
      return keyPath_;
    }
    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @return The count of keyPath.
     */
    public int getKeyPathCount() {
      return keyPath_.size();
    }
    /**
     * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
     * @param index The index of the element to return.
     * @return The keyPath at the given index.
     */
    public com.google.protobuf.ByteString getKeyPath(int index) {
      return keyPath_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < keyPath_.size(); i++) {
        output.writeBytes(1, keyPath_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < keyPath_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(keyPath_.get(i));
        }
        size += dataSize;
        size += 1 * getKeyPathList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.ibc.core.commitment.v2.CommitmentProto.MerklePath)) {
        return super.equals(obj);
      }
      com.ibc.core.commitment.v2.CommitmentProto.MerklePath other = (com.ibc.core.commitment.v2.CommitmentProto.MerklePath) obj;

      if (!getKeyPathList()
          .equals(other.getKeyPathList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getKeyPathCount() > 0) {
        hash = (37 * hash) + KEY_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getKeyPathList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.ibc.core.commitment.v2.CommitmentProto.MerklePath prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * MerklePath is the path used to verify commitment proofs, which can be an
     * arbitrary structured object (defined by a commitment type).
     * ICS-23 verification supports membership proofs for nested merkle trees.
     * The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
     * The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
     * stored in the consensus state of the client.
     * Each element of the path represents the key of a merkle tree from the root to the leaf.
     * The elements of the path before the final element must be the path to the tree that contains
     * the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
     * The final element of the path is the key of the leaf in the ICS24 provable store,
     * Thus IBC core will append the ICS24 path to the final element of the MerklePath
     * stored in the counterparty to create the full path to the leaf for proof verification.
     * Examples:
     * Cosmos SDK:
     * The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
     * are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
     * MerklePrefix has the following structure: ["ibc", ""]
     * The core IBC handler will append the ICS24 path to the final element of the MerklePath
     * like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
     * Ethereum:
     * The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
     * by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
     * Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
     * Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
     * MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
     * The core IBC handler will append the ICS24 path to the final element of the MerklePath
     * like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
     * verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
     * consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
     * provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
     * by the client against the root hash in the client's consensus state.
     * </pre>
     *
     * Protobuf type {@code ibc.core.commitment.v2.MerklePath}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ibc.core.commitment.v2.MerklePath)
        com.ibc.core.commitment.v2.CommitmentProto.MerklePathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ibc.core.commitment.v2.CommitmentProto.internal_static_ibc_core_commitment_v2_MerklePath_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ibc.core.commitment.v2.CommitmentProto.internal_static_ibc_core_commitment_v2_MerklePath_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ibc.core.commitment.v2.CommitmentProto.MerklePath.class, com.ibc.core.commitment.v2.CommitmentProto.MerklePath.Builder.class);
      }

      // Construct using com.ibc.core.commitment.v2.CommitmentProto.MerklePath.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        keyPath_ = java.util.Collections.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ibc.core.commitment.v2.CommitmentProto.internal_static_ibc_core_commitment_v2_MerklePath_descriptor;
      }

      @java.lang.Override
      public com.ibc.core.commitment.v2.CommitmentProto.MerklePath getDefaultInstanceForType() {
        return com.ibc.core.commitment.v2.CommitmentProto.MerklePath.getDefaultInstance();
      }

      @java.lang.Override
      public com.ibc.core.commitment.v2.CommitmentProto.MerklePath build() {
        com.ibc.core.commitment.v2.CommitmentProto.MerklePath result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.ibc.core.commitment.v2.CommitmentProto.MerklePath buildPartial() {
        com.ibc.core.commitment.v2.CommitmentProto.MerklePath result = new com.ibc.core.commitment.v2.CommitmentProto.MerklePath(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.ibc.core.commitment.v2.CommitmentProto.MerklePath result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          keyPath_ = java.util.Collections.unmodifiableList(keyPath_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.keyPath_ = keyPath_;
      }

      private void buildPartial0(com.ibc.core.commitment.v2.CommitmentProto.MerklePath result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ibc.core.commitment.v2.CommitmentProto.MerklePath) {
          return mergeFrom((com.ibc.core.commitment.v2.CommitmentProto.MerklePath)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ibc.core.commitment.v2.CommitmentProto.MerklePath other) {
        if (other == com.ibc.core.commitment.v2.CommitmentProto.MerklePath.getDefaultInstance()) return this;
        if (!other.keyPath_.isEmpty()) {
          if (keyPath_.isEmpty()) {
            keyPath_ = other.keyPath_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureKeyPathIsMutable();
            keyPath_.addAll(other.keyPath_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureKeyPathIsMutable();
                keyPath_.add(v);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.protobuf.ByteString> keyPath_ = java.util.Collections.emptyList();
      private void ensureKeyPathIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          keyPath_ = new java.util.ArrayList<com.google.protobuf.ByteString>(keyPath_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @return A list containing the keyPath.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getKeyPathList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(keyPath_) : keyPath_;
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @return The count of keyPath.
       */
      public int getKeyPathCount() {
        return keyPath_.size();
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @param index The index of the element to return.
       * @return The keyPath at the given index.
       */
      public com.google.protobuf.ByteString getKeyPath(int index) {
        return keyPath_.get(index);
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @param index The index to set the value at.
       * @param value The keyPath to set.
       * @return This builder for chaining.
       */
      public Builder setKeyPath(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureKeyPathIsMutable();
        keyPath_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @param value The keyPath to add.
       * @return This builder for chaining.
       */
      public Builder addKeyPath(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureKeyPathIsMutable();
        keyPath_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @param values The keyPath to add.
       * @return This builder for chaining.
       */
      public Builder addAllKeyPath(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureKeyPathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keyPath_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes key_path = 1 [json_name = "keyPath"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKeyPath() {
        keyPath_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ibc.core.commitment.v2.MerklePath)
    }

    // @@protoc_insertion_point(class_scope:ibc.core.commitment.v2.MerklePath)
    private static final com.ibc.core.commitment.v2.CommitmentProto.MerklePath DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.ibc.core.commitment.v2.CommitmentProto.MerklePath();
    }

    public static com.ibc.core.commitment.v2.CommitmentProto.MerklePath getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MerklePath>
        PARSER = new com.google.protobuf.AbstractParser<MerklePath>() {
      @java.lang.Override
      public MerklePath parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<MerklePath> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MerklePath> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.ibc.core.commitment.v2.CommitmentProto.MerklePath getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ibc_core_commitment_v2_MerklePath_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ibc_core_commitment_v2_MerklePath_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\'ibc/core/commitment/v2/commitment.prot" +
      "o\022\026ibc.core.commitment.v2\"\'\n\nMerklePath\022" +
      "\031\n\010key_path\030\001 \003(\014R\007keyPathB\350\001\n\032com.ibc.c" +
      "ore.commitment.v2B\017CommitmentProtoZ@gith" +
      "ub.com/cosmos/ibc-go/v10/modules/core/23" +
      "-commitment/types/v2\242\002\003ICC\252\002\026Ibc.Core.Co" +
      "mmitment.V2\312\002\026Ibc\\Core\\Commitment\\V2\342\002\"I" +
      "bc\\Core\\Commitment\\V2\\GPBMetadata\352\002\031Ibc:" +
      ":Core::Commitment::V2b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_ibc_core_commitment_v2_MerklePath_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ibc_core_commitment_v2_MerklePath_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ibc_core_commitment_v2_MerklePath_descriptor,
        new java.lang.String[] { "KeyPath", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
